-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sha_transform is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sha_info_data_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    sha_info_data_ce0 : OUT STD_LOGIC;
    sha_info_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    sha_info_digest_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    sha_info_digest_ce0 : OUT STD_LOGIC;
    sha_info_digest_we0 : OUT STD_LOGIC;
    sha_info_digest_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    sha_info_digest_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    sha_info_digest_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    sha_info_digest_ce1 : OUT STD_LOGIC;
    sha_info_digest_we1 : OUT STD_LOGIC;
    sha_info_digest_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    sha_info_digest_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of sha_transform is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (18 downto 0) := "0000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (18 downto 0) := "0000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (18 downto 0) := "0000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (18 downto 0) := "0000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (18 downto 0) := "0000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (18 downto 0) := "0000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (18 downto 0) := "0001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (18 downto 0) := "0010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (18 downto 0) := "0100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (18 downto 0) := "1000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv7_10 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_const_lv6_14 : STD_LOGIC_VECTOR (5 downto 0) := "010100";
    constant ap_const_lv6_28 : STD_LOGIC_VECTOR (5 downto 0) := "101000";
    constant ap_const_lv7_3C : STD_LOGIC_VECTOR (6 downto 0) := "0111100";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv7_50 : STD_LOGIC_VECTOR (6 downto 0) := "1010000";
    constant ap_const_lv7_7D : STD_LOGIC_VECTOR (6 downto 0) := "1111101";
    constant ap_const_lv7_78 : STD_LOGIC_VECTOR (6 downto 0) := "1111000";
    constant ap_const_lv7_72 : STD_LOGIC_VECTOR (6 downto 0) := "1110010";
    constant ap_const_lv7_70 : STD_LOGIC_VECTOR (6 downto 0) := "1110000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_5A827999 : STD_LOGIC_VECTOR (31 downto 0) := "01011010100000100111100110011001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_6ED9EBA1 : STD_LOGIC_VECTOR (31 downto 0) := "01101110110110011110101110100001";
    constant ap_const_lv6_3C : STD_LOGIC_VECTOR (5 downto 0) := "111100";
    constant ap_const_lv32_8F1BBCDC : STD_LOGIC_VECTOR (31 downto 0) := "10001111000110111011110011011100";
    constant ap_const_lv32_CA62C1D6 : STD_LOGIC_VECTOR (31 downto 0) := "11001010011000101100000111010110";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_fu_495_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_1025 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln103_fu_501_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln103_reg_1030 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln101_fu_489_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln105_fu_506_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal W_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal W_load_reg_1053 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal W_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal W_load_1_reg_1058 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_6_fu_578_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal A_reg_1078 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal B_reg_1084 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal C_reg_1090 : STD_LOGIC_VECTOR (31 downto 0);
    signal D_reg_1096 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal E_reg_1102 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_7_fu_590_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_7_reg_1111 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal icmp_ln115_fu_584_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal temp_fu_665_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal C_1_fu_685_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal icmp_ln119_fu_693_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_8_fu_704_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_8_reg_1139 : STD_LOGIC_VECTOR (5 downto 0);
    signal temp_1_fu_762_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal C_2_fu_782_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal icmp_ln123_fu_790_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_9_fu_801_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_9_reg_1162 : STD_LOGIC_VECTOR (5 downto 0);
    signal temp_2_fu_871_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal C_3_fu_891_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal icmp_ln127_fu_899_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln129_2_fu_950_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln129_2_reg_1185 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_4_fu_970_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_4_reg_1190 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_10_fu_978_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_10_reg_1195 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln134_fu_996_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln134_reg_1200 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln135_fu_1001_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln135_reg_1205 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_3_fu_1012_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal add_ln136_fu_1017_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln136_reg_1215 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal W_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal W_ce0 : STD_LOGIC;
    signal W_we0 : STD_LOGIC;
    signal W_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal W_ce1 : STD_LOGIC;
    signal W_we1 : STD_LOGIC;
    signal W_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_reg_196 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_1_reg_207 : STD_LOGIC_VECTOR (6 downto 0);
    signal E_0_reg_219 : STD_LOGIC_VECTOR (31 downto 0);
    signal E_4_reg_229 : STD_LOGIC_VECTOR (31 downto 0);
    signal D_1_reg_240 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_0_reg_251 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_4_reg_261 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_2_reg_272 : STD_LOGIC_VECTOR (4 downto 0);
    signal E_5_reg_294 : STD_LOGIC_VECTOR (31 downto 0);
    signal E_1_reg_283 : STD_LOGIC_VECTOR (31 downto 0);
    signal D_2_reg_306 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_5_reg_329 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_1_reg_318 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_3_reg_341 : STD_LOGIC_VECTOR (5 downto 0);
    signal E_6_reg_363 : STD_LOGIC_VECTOR (31 downto 0);
    signal E_2_reg_352 : STD_LOGIC_VECTOR (31 downto 0);
    signal D_3_reg_375 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_6_reg_398 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_2_reg_387 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_4_reg_410 : STD_LOGIC_VECTOR (5 downto 0);
    signal E_7_reg_432 : STD_LOGIC_VECTOR (31 downto 0);
    signal E_3_reg_421 : STD_LOGIC_VECTOR (31 downto 0);
    signal D_4_reg_444 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_7_reg_466 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_3_reg_456 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_5_reg_478 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln107_fu_518_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln107_1_fu_529_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln107_2_fu_540_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln107_3_fu_551_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln107_4_fu_573_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln117_fu_596_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln121_fu_699_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln125_fu_796_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln129_fu_939_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln132_fu_984_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln133_fu_990_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal add_ln107_fu_512_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln107_1_fu_523_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln107_2_fu_534_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln107_3_fu_545_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal xor_ln107_1_fu_560_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln107_fu_556_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln117_fu_601_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal lshr_ln_fu_605_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal xor_ln117_fu_629_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln117_fu_623_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln117_1_fu_635_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln_fu_615_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln117_1_fu_653_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln117_fu_641_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln117_2_fu_659_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln117_fu_647_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln117_1_fu_671_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal lshr_ln117_1_fu_675_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln121_fu_710_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal lshr_ln1_fu_714_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal xor_ln121_fu_732_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln1_fu_724_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln121_1_fu_750_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln121_1_fu_738_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln121_2_fu_756_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln121_fu_744_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln121_1_fu_768_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal lshr_ln121_1_fu_772_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln125_fu_807_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal lshr_ln2_fu_811_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln125_fu_829_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln125_fu_835_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln125_1_fu_841_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln125_1_fu_847_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln2_fu_821_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln125_1_fu_859_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln125_2_fu_865_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln125_fu_853_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln125_1_fu_877_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal lshr_ln125_1_fu_881_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln129_fu_905_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal lshr_ln3_fu_909_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal xor_ln129_fu_927_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln3_fu_919_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln129_1_fu_944_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln129_1_fu_933_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln129_1_fu_956_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal lshr_ln129_1_fu_960_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln129_fu_1006_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (18 downto 0);

    component sha_transform_W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    W_U : component sha_transform_W
    generic map (
        DataWidth => 32,
        AddressRange => 80,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => W_address0,
        ce0 => W_ce0,
        we0 => W_we0,
        d0 => sha_info_data_q0,
        q0 => W_q0,
        address1 => W_address1,
        ce1 => W_ce1,
        we1 => W_we1,
        d1 => W_d1,
        q1 => W_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    B_0_reg_251_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                B_0_reg_251 <= B_4_reg_261;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                B_0_reg_251 <= B_reg_1084;
            end if; 
        end if;
    end process;

    B_1_reg_318_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln115_fu_584_p2 = ap_const_lv1_1))) then 
                B_1_reg_318 <= B_0_reg_251;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                B_1_reg_318 <= B_5_reg_329;
            end if; 
        end if;
    end process;

    B_2_reg_387_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln119_fu_693_p2 = ap_const_lv1_1))) then 
                B_2_reg_387 <= B_1_reg_318;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                B_2_reg_387 <= B_6_reg_398;
            end if; 
        end if;
    end process;

    B_3_reg_456_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln123_fu_790_p2 = ap_const_lv1_1))) then 
                B_3_reg_456 <= B_2_reg_387;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                B_3_reg_456 <= B_7_reg_466;
            end if; 
        end if;
    end process;

    B_4_reg_261_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                B_4_reg_261 <= temp_fu_665_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                B_4_reg_261 <= A_reg_1078;
            end if; 
        end if;
    end process;

    B_5_reg_329_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln115_fu_584_p2 = ap_const_lv1_1))) then 
                B_5_reg_329 <= B_4_reg_261;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                B_5_reg_329 <= temp_1_fu_762_p2;
            end if; 
        end if;
    end process;

    B_6_reg_398_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln119_fu_693_p2 = ap_const_lv1_1))) then 
                B_6_reg_398 <= B_5_reg_329;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                B_6_reg_398 <= temp_2_fu_871_p2;
            end if; 
        end if;
    end process;

    B_7_reg_466_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln123_fu_790_p2 = ap_const_lv1_1))) then 
                B_7_reg_466 <= B_6_reg_398;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                B_7_reg_466 <= temp_3_fu_1012_p2;
            end if; 
        end if;
    end process;

    D_1_reg_240_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                D_1_reg_240 <= C_1_fu_685_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                D_1_reg_240 <= C_reg_1090;
            end if; 
        end if;
    end process;

    D_2_reg_306_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln115_fu_584_p2 = ap_const_lv1_1))) then 
                D_2_reg_306 <= D_1_reg_240;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                D_2_reg_306 <= C_2_fu_782_p3;
            end if; 
        end if;
    end process;

    D_3_reg_375_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln119_fu_693_p2 = ap_const_lv1_1))) then 
                D_3_reg_375 <= D_2_reg_306;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                D_3_reg_375 <= C_3_fu_891_p3;
            end if; 
        end if;
    end process;

    D_4_reg_444_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln123_fu_790_p2 = ap_const_lv1_1))) then 
                D_4_reg_444 <= D_3_reg_375;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                D_4_reg_444 <= C_4_reg_1190;
            end if; 
        end if;
    end process;

    E_0_reg_219_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                E_0_reg_219 <= E_4_reg_229;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                E_0_reg_219 <= sha_info_digest_q0;
            end if; 
        end if;
    end process;

    E_1_reg_283_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln115_fu_584_p2 = ap_const_lv1_1))) then 
                E_1_reg_283 <= E_0_reg_219;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                E_1_reg_283 <= E_5_reg_294;
            end if; 
        end if;
    end process;

    E_2_reg_352_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln119_fu_693_p2 = ap_const_lv1_1))) then 
                E_2_reg_352 <= E_1_reg_283;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                E_2_reg_352 <= E_6_reg_363;
            end if; 
        end if;
    end process;

    E_3_reg_421_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln123_fu_790_p2 = ap_const_lv1_1))) then 
                E_3_reg_421 <= E_2_reg_352;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                E_3_reg_421 <= E_7_reg_432;
            end if; 
        end if;
    end process;

    E_4_reg_229_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                E_4_reg_229 <= D_1_reg_240;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                E_4_reg_229 <= sha_info_digest_q1;
            end if; 
        end if;
    end process;

    E_5_reg_294_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln115_fu_584_p2 = ap_const_lv1_1))) then 
                E_5_reg_294 <= E_4_reg_229;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                E_5_reg_294 <= D_2_reg_306;
            end if; 
        end if;
    end process;

    E_6_reg_363_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln119_fu_693_p2 = ap_const_lv1_1))) then 
                E_6_reg_363 <= E_5_reg_294;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                E_6_reg_363 <= D_3_reg_375;
            end if; 
        end if;
    end process;

    E_7_reg_432_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln123_fu_790_p2 = ap_const_lv1_1))) then 
                E_7_reg_432 <= E_6_reg_363;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                E_7_reg_432 <= D_4_reg_444;
            end if; 
        end if;
    end process;

    i_0_reg_196_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_0_reg_196 <= i_reg_1025;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_196 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_1_reg_207_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln101_fu_489_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_1_reg_207 <= ap_const_lv7_10;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i_1_reg_207 <= i_6_fu_578_p2;
            end if; 
        end if;
    end process;

    i_2_reg_272_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                i_2_reg_272 <= i_7_reg_1111;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                i_2_reg_272 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_3_reg_341_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln115_fu_584_p2 = ap_const_lv1_1))) then 
                i_3_reg_341 <= ap_const_lv6_14;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                i_3_reg_341 <= i_8_reg_1139;
            end if; 
        end if;
    end process;

    i_4_reg_410_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln119_fu_693_p2 = ap_const_lv1_1))) then 
                i_4_reg_410 <= ap_const_lv6_28;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                i_4_reg_410 <= i_9_reg_1162;
            end if; 
        end if;
    end process;

    i_5_reg_478_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln123_fu_790_p2 = ap_const_lv1_1))) then 
                i_5_reg_478 <= ap_const_lv7_3C;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                i_5_reg_478 <= i_10_reg_1195;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                A_reg_1078 <= sha_info_digest_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                B_reg_1084 <= sha_info_digest_q0;
                C_reg_1090 <= sha_info_digest_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln127_fu_899_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                C_4_reg_1190 <= C_4_fu_970_p3;
                add_ln129_2_reg_1185 <= add_ln129_2_fu_950_p2;
                i_10_reg_1195 <= i_10_fu_978_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                D_reg_1096 <= sha_info_digest_q1;
                E_reg_1102 <= sha_info_digest_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                W_load_1_reg_1058 <= W_q1;
                W_load_reg_1053 <= W_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) and (icmp_ln127_fu_899_p2 = ap_const_lv1_1))) then
                add_ln134_reg_1200 <= add_ln134_fu_996_p2;
                add_ln135_reg_1205 <= add_ln135_fu_1001_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                add_ln136_reg_1215 <= add_ln136_fu_1017_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                i_7_reg_1111 <= i_7_fu_590_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln119_fu_693_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                i_8_reg_1139 <= i_8_fu_704_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln123_fu_790_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                i_9_reg_1162 <= i_9_fu_801_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_1025 <= i_fu_495_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln101_fu_489_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln103_reg_1030(4 downto 0) <= zext_ln103_fu_501_p1(4 downto 0);
            end if;
        end if;
    end process;
    zext_ln103_reg_1030(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln101_fu_489_p2, ap_CS_fsm_state4, icmp_ln105_fu_506_p2, ap_CS_fsm_state10, icmp_ln115_fu_584_p2, ap_CS_fsm_state12, icmp_ln119_fu_693_p2, ap_CS_fsm_state14, icmp_ln123_fu_790_p2, ap_CS_fsm_state16, icmp_ln127_fu_899_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln101_fu_489_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln105_fu_506_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln115_fu_584_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln119_fu_693_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln123_fu_790_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (icmp_ln127_fu_899_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    C_1_fu_685_p3 <= (trunc_ln117_1_fu_671_p1 & lshr_ln117_1_fu_675_p4);
    C_2_fu_782_p3 <= (trunc_ln121_1_fu_768_p1 & lshr_ln121_1_fu_772_p4);
    C_3_fu_891_p3 <= (trunc_ln125_1_fu_877_p1 & lshr_ln125_1_fu_881_p4);
    C_4_fu_970_p3 <= (trunc_ln129_1_fu_956_p1 & lshr_ln129_1_fu_960_p4);

    W_address0_assign_proc : process(zext_ln103_reg_1030, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state3, zext_ln107_fu_518_p1, zext_ln107_3_fu_551_p1, zext_ln117_fu_596_p1, zext_ln125_fu_796_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            W_address0 <= zext_ln125_fu_796_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            W_address0 <= zext_ln117_fu_596_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            W_address0 <= zext_ln107_3_fu_551_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            W_address0 <= zext_ln107_fu_518_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            W_address0 <= zext_ln103_reg_1030(7 - 1 downto 0);
        else 
            W_address0 <= "XXXXXXX";
        end if; 
    end process;


    W_address1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state12, ap_CS_fsm_state16, zext_ln107_1_fu_529_p1, zext_ln107_2_fu_540_p1, zext_ln107_4_fu_573_p1, zext_ln121_fu_699_p1, zext_ln129_fu_939_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            W_address1 <= zext_ln129_fu_939_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            W_address1 <= zext_ln121_fu_699_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            W_address1 <= zext_ln107_4_fu_573_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            W_address1 <= zext_ln107_2_fu_540_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            W_address1 <= zext_ln107_1_fu_529_p1(7 - 1 downto 0);
        else 
            W_address1 <= "XXXXXXX";
        end if; 
    end process;


    W_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            W_ce0 <= ap_const_logic_1;
        else 
            W_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    W_ce1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state12, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            W_ce1 <= ap_const_logic_1;
        else 
            W_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    W_d1 <= (xor_ln107_fu_556_p2 xor xor_ln107_1_fu_560_p2);

    W_we0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            W_we0 <= ap_const_logic_1;
        else 
            W_we0 <= ap_const_logic_0;
        end if; 
    end process;


    W_we1_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            W_we1 <= ap_const_logic_1;
        else 
            W_we1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln107_1_fu_523_p2 <= std_logic_vector(unsigned(i_1_reg_207) + unsigned(ap_const_lv7_78));
    add_ln107_2_fu_534_p2 <= std_logic_vector(unsigned(i_1_reg_207) + unsigned(ap_const_lv7_72));
    add_ln107_3_fu_545_p2 <= std_logic_vector(unsigned(i_1_reg_207) + unsigned(ap_const_lv7_70));
    add_ln107_fu_512_p2 <= std_logic_vector(unsigned(i_1_reg_207) + unsigned(ap_const_lv7_7D));
    add_ln117_1_fu_653_p2 <= std_logic_vector(unsigned(ap_const_lv32_5A827999) + unsigned(or_ln_fu_615_p3));
    add_ln117_2_fu_659_p2 <= std_logic_vector(unsigned(add_ln117_1_fu_653_p2) + unsigned(or_ln117_fu_641_p2));
    add_ln117_fu_647_p2 <= std_logic_vector(unsigned(W_q0) + unsigned(E_0_reg_219));
    add_ln121_1_fu_750_p2 <= std_logic_vector(unsigned(ap_const_lv32_6ED9EBA1) + unsigned(or_ln1_fu_724_p3));
    add_ln121_2_fu_756_p2 <= std_logic_vector(unsigned(add_ln121_1_fu_750_p2) + unsigned(xor_ln121_1_fu_738_p2));
    add_ln121_fu_744_p2 <= std_logic_vector(unsigned(W_q1) + unsigned(E_1_reg_283));
    add_ln125_1_fu_859_p2 <= std_logic_vector(unsigned(or_ln125_1_fu_847_p2) + unsigned(or_ln2_fu_821_p3));
    add_ln125_2_fu_865_p2 <= std_logic_vector(signed(ap_const_lv32_8F1BBCDC) + signed(add_ln125_1_fu_859_p2));
    add_ln125_fu_853_p2 <= std_logic_vector(unsigned(W_q0) + unsigned(E_2_reg_352));
    add_ln129_1_fu_944_p2 <= std_logic_vector(signed(ap_const_lv32_CA62C1D6) + signed(or_ln3_fu_919_p3));
    add_ln129_2_fu_950_p2 <= std_logic_vector(unsigned(add_ln129_1_fu_944_p2) + unsigned(xor_ln129_1_fu_933_p2));
    add_ln129_fu_1006_p2 <= std_logic_vector(unsigned(W_q1) + unsigned(E_3_reg_421));
    add_ln132_fu_984_p2 <= std_logic_vector(unsigned(A_reg_1078) + unsigned(B_7_reg_466));
    add_ln133_fu_990_p2 <= std_logic_vector(unsigned(B_reg_1084) + unsigned(B_3_reg_456));
    add_ln134_fu_996_p2 <= std_logic_vector(unsigned(C_reg_1090) + unsigned(D_4_reg_444));
    add_ln135_fu_1001_p2 <= std_logic_vector(unsigned(D_reg_1096) + unsigned(E_7_reg_432));
    add_ln136_fu_1017_p2 <= std_logic_vector(unsigned(E_reg_1102) + unsigned(E_3_reg_421));
    and_ln117_1_fu_635_p2 <= (xor_ln117_fu_629_p2 and E_4_reg_229);
    and_ln117_fu_623_p2 <= (D_1_reg_240 and B_0_reg_251);
    and_ln125_1_fu_841_p2 <= (E_6_reg_363 and D_3_reg_375);
    and_ln125_fu_835_p2 <= (or_ln125_fu_829_p2 and B_2_reg_387);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_10_fu_978_p2 <= std_logic_vector(unsigned(ap_const_lv7_1) + unsigned(i_5_reg_478));
    i_6_fu_578_p2 <= std_logic_vector(unsigned(i_1_reg_207) + unsigned(ap_const_lv7_1));
    i_7_fu_590_p2 <= std_logic_vector(unsigned(i_2_reg_272) + unsigned(ap_const_lv5_1));
    i_8_fu_704_p2 <= std_logic_vector(unsigned(ap_const_lv6_1) + unsigned(i_3_reg_341));
    i_9_fu_801_p2 <= std_logic_vector(unsigned(ap_const_lv6_1) + unsigned(i_4_reg_410));
    i_fu_495_p2 <= std_logic_vector(unsigned(i_0_reg_196) + unsigned(ap_const_lv5_1));
    icmp_ln101_fu_489_p2 <= "1" when (i_0_reg_196 = ap_const_lv5_10) else "0";
    icmp_ln105_fu_506_p2 <= "1" when (i_1_reg_207 = ap_const_lv7_50) else "0";
    icmp_ln115_fu_584_p2 <= "1" when (i_2_reg_272 = ap_const_lv5_14) else "0";
    icmp_ln119_fu_693_p2 <= "1" when (i_3_reg_341 = ap_const_lv6_28) else "0";
    icmp_ln123_fu_790_p2 <= "1" when (i_4_reg_410 = ap_const_lv6_3C) else "0";
    icmp_ln127_fu_899_p2 <= "1" when (i_5_reg_478 = ap_const_lv7_50) else "0";
    lshr_ln117_1_fu_675_p4 <= B_0_reg_251(31 downto 2);
    lshr_ln121_1_fu_772_p4 <= B_1_reg_318(31 downto 2);
    lshr_ln125_1_fu_881_p4 <= B_2_reg_387(31 downto 2);
    lshr_ln129_1_fu_960_p4 <= B_3_reg_456(31 downto 2);
    lshr_ln1_fu_714_p4 <= B_5_reg_329(31 downto 27);
    lshr_ln2_fu_811_p4 <= B_6_reg_398(31 downto 27);
    lshr_ln3_fu_909_p4 <= B_7_reg_466(31 downto 27);
    lshr_ln_fu_605_p4 <= B_4_reg_261(31 downto 27);
    or_ln117_fu_641_p2 <= (and_ln117_fu_623_p2 or and_ln117_1_fu_635_p2);
    or_ln125_1_fu_847_p2 <= (and_ln125_fu_835_p2 or and_ln125_1_fu_841_p2);
    or_ln125_fu_829_p2 <= (E_6_reg_363 or D_3_reg_375);
    or_ln1_fu_724_p3 <= (trunc_ln121_fu_710_p1 & lshr_ln1_fu_714_p4);
    or_ln2_fu_821_p3 <= (trunc_ln125_fu_807_p1 & lshr_ln2_fu_811_p4);
    or_ln3_fu_919_p3 <= (trunc_ln129_fu_905_p1 & lshr_ln3_fu_909_p4);
    or_ln_fu_615_p3 <= (trunc_ln117_fu_601_p1 & lshr_ln_fu_605_p4);
    sha_info_data_address0 <= zext_ln103_fu_501_p1(4 - 1 downto 0);

    sha_info_data_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sha_info_data_ce0 <= ap_const_logic_1;
        else 
            sha_info_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sha_info_digest_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state16, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            sha_info_digest_address0 <= ap_const_lv3_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sha_info_digest_address0 <= ap_const_lv3_4;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            sha_info_digest_address0 <= ap_const_lv3_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sha_info_digest_address0 <= ap_const_lv3_0;
        else 
            sha_info_digest_address0 <= "XXX";
        end if; 
    end process;


    sha_info_digest_address1_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            sha_info_digest_address1 <= ap_const_lv3_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            sha_info_digest_address1 <= ap_const_lv3_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            sha_info_digest_address1 <= ap_const_lv3_3;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            sha_info_digest_address1 <= ap_const_lv3_2;
        else 
            sha_info_digest_address1 <= "XXX";
        end if; 
    end process;


    sha_info_digest_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state16, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            sha_info_digest_ce0 <= ap_const_logic_1;
        else 
            sha_info_digest_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sha_info_digest_ce1_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            sha_info_digest_ce1 <= ap_const_logic_1;
        else 
            sha_info_digest_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sha_info_digest_d0_assign_proc : process(ap_CS_fsm_state16, add_ln135_reg_1205, ap_CS_fsm_state18, add_ln133_fu_990_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            sha_info_digest_d0 <= add_ln135_reg_1205;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            sha_info_digest_d0 <= add_ln133_fu_990_p2;
        else 
            sha_info_digest_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sha_info_digest_d1_assign_proc : process(ap_CS_fsm_state16, add_ln134_reg_1200, add_ln136_reg_1215, ap_CS_fsm_state18, add_ln132_fu_984_p2, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            sha_info_digest_d1 <= add_ln136_reg_1215;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            sha_info_digest_d1 <= add_ln134_reg_1200;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            sha_info_digest_d1 <= add_ln132_fu_984_p2;
        else 
            sha_info_digest_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sha_info_digest_we0_assign_proc : process(ap_CS_fsm_state16, icmp_ln127_fu_899_p2, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or ((ap_const_logic_1 = ap_CS_fsm_state16) and (icmp_ln127_fu_899_p2 = ap_const_lv1_1)))) then 
            sha_info_digest_we0 <= ap_const_logic_1;
        else 
            sha_info_digest_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sha_info_digest_we1_assign_proc : process(ap_CS_fsm_state16, icmp_ln127_fu_899_p2, ap_CS_fsm_state18, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or ((ap_const_logic_1 = ap_CS_fsm_state16) and (icmp_ln127_fu_899_p2 = ap_const_lv1_1)))) then 
            sha_info_digest_we1 <= ap_const_logic_1;
        else 
            sha_info_digest_we1 <= ap_const_logic_0;
        end if; 
    end process;

    temp_1_fu_762_p2 <= std_logic_vector(unsigned(add_ln121_2_fu_756_p2) + unsigned(add_ln121_fu_744_p2));
    temp_2_fu_871_p2 <= std_logic_vector(unsigned(add_ln125_2_fu_865_p2) + unsigned(add_ln125_fu_853_p2));
    temp_3_fu_1012_p2 <= std_logic_vector(unsigned(add_ln129_2_reg_1185) + unsigned(add_ln129_fu_1006_p2));
    temp_fu_665_p2 <= std_logic_vector(unsigned(add_ln117_2_fu_659_p2) + unsigned(add_ln117_fu_647_p2));
    trunc_ln117_1_fu_671_p1 <= B_0_reg_251(2 - 1 downto 0);
    trunc_ln117_fu_601_p1 <= B_4_reg_261(27 - 1 downto 0);
    trunc_ln121_1_fu_768_p1 <= B_1_reg_318(2 - 1 downto 0);
    trunc_ln121_fu_710_p1 <= B_5_reg_329(27 - 1 downto 0);
    trunc_ln125_1_fu_877_p1 <= B_2_reg_387(2 - 1 downto 0);
    trunc_ln125_fu_807_p1 <= B_6_reg_398(27 - 1 downto 0);
    trunc_ln129_1_fu_956_p1 <= B_3_reg_456(2 - 1 downto 0);
    trunc_ln129_fu_905_p1 <= B_7_reg_466(27 - 1 downto 0);
    xor_ln107_1_fu_560_p2 <= (W_q1 xor W_q0);
    xor_ln107_fu_556_p2 <= (W_load_reg_1053 xor W_load_1_reg_1058);
    xor_ln117_fu_629_p2 <= (ap_const_lv32_FFFFFFFF xor B_0_reg_251);
    xor_ln121_1_fu_738_p2 <= (xor_ln121_fu_732_p2 xor D_2_reg_306);
    xor_ln121_fu_732_p2 <= (E_5_reg_294 xor B_1_reg_318);
    xor_ln129_1_fu_933_p2 <= (xor_ln129_fu_927_p2 xor D_4_reg_444);
    xor_ln129_fu_927_p2 <= (E_7_reg_432 xor B_3_reg_456);
    zext_ln103_fu_501_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_196),64));
    zext_ln107_1_fu_529_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln107_1_fu_523_p2),64));
    zext_ln107_2_fu_540_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln107_2_fu_534_p2),64));
    zext_ln107_3_fu_551_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln107_3_fu_545_p2),64));
    zext_ln107_4_fu_573_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_207),64));
    zext_ln107_fu_518_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln107_fu_512_p2),64));
    zext_ln117_fu_596_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_272),64));
    zext_ln121_fu_699_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_reg_341),64));
    zext_ln125_fu_796_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4_reg_410),64));
    zext_ln129_fu_939_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_5_reg_478),64));
end behav;
