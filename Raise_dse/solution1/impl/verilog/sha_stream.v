// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="sha_stream,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-flgb2104-1-e,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.985000,HLS_SYN_LAT=65,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=0,HLS_SYN_FF=6327,HLS_SYN_LUT=25804,HLS_VERSION=2019_1}" *)

module sha_stream (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [3:0] sha_info_data_address0;
reg    sha_info_data_ce0;
reg    sha_info_data_we0;
reg   [31:0] sha_info_data_d0;
wire   [31:0] sha_info_data_q0;
reg   [3:0] sha_info_data_address1;
reg    sha_info_data_ce1;
reg    sha_info_data_we1;
wire   [31:0] sha_info_data_q1;
reg   [2:0] sha_info_digest_address0;
reg    sha_info_digest_ce0;
reg    sha_info_digest_we0;
reg   [31:0] sha_info_digest_d0;
wire   [31:0] sha_info_digest_q0;
reg   [2:0] sha_info_digest_address1;
reg    sha_info_digest_ce1;
reg    sha_info_digest_we1;
reg   [31:0] sha_info_digest_d1;
wire   [31:0] sha_info_digest_q1;
wire   [1:0] j_fu_138_p2;
wire    ap_CS_fsm_state4;
wire   [63:0] add_ln66_fu_169_p2;
wire    ap_CS_fsm_state5;
wire    grp_sha_transform_fu_124_ap_start;
wire    grp_sha_transform_fu_124_ap_done;
wire    grp_sha_transform_fu_124_ap_idle;
wire    grp_sha_transform_fu_124_ap_ready;
wire   [3:0] grp_sha_transform_fu_124_sha_info_data_address0;
wire    grp_sha_transform_fu_124_sha_info_data_ce0;
wire   [3:0] grp_sha_transform_fu_124_sha_info_data_address1;
wire    grp_sha_transform_fu_124_sha_info_data_ce1;
wire   [2:0] grp_sha_transform_fu_124_sha_info_digest_address0;
wire    grp_sha_transform_fu_124_sha_info_digest_ce0;
wire    grp_sha_transform_fu_124_sha_info_digest_we0;
wire   [31:0] grp_sha_transform_fu_124_sha_info_digest_d0;
wire   [2:0] grp_sha_transform_fu_124_sha_info_digest_address1;
wire    grp_sha_transform_fu_124_sha_info_digest_ce1;
wire    grp_sha_transform_fu_124_sha_info_digest_we1;
wire   [31:0] grp_sha_transform_fu_124_sha_info_digest_d1;
reg   [1:0] j_0_reg_102;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln210_fu_132_p2;
reg   [63:0] p_1_rec_i_reg_113;
wire   [0:0] icmp_ln64_fu_163_p2;
reg    grp_sha_transform_fu_124_ap_start_reg;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire   [63:0] sum_i_cast_fu_154_p1;
wire    ap_CS_fsm_state2;
wire   [5:0] empty_5_fu_144_p1;
wire   [5:0] sum_i_fu_148_p2;
wire   [31:0] trunc_ln64_fu_159_p1;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 grp_sha_transform_fu_124_ap_start_reg = 1'b0;
end

sha_stream_sha_inbkb #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
sha_info_data_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sha_info_data_address0),
    .ce0(sha_info_data_ce0),
    .we0(sha_info_data_we0),
    .d0(sha_info_data_d0),
    .q0(sha_info_data_q0),
    .address1(sha_info_data_address1),
    .ce1(sha_info_data_ce1),
    .we1(sha_info_data_we1),
    .d1(32'd0),
    .q1(sha_info_data_q1)
);

sha_stream_sha_incud #(
    .DataWidth( 32 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
sha_info_digest_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sha_info_digest_address0),
    .ce0(sha_info_digest_ce0),
    .we0(sha_info_digest_we0),
    .d0(sha_info_digest_d0),
    .q0(sha_info_digest_q0),
    .address1(sha_info_digest_address1),
    .ce1(sha_info_digest_ce1),
    .we1(sha_info_digest_we1),
    .d1(sha_info_digest_d1),
    .q1(sha_info_digest_q1)
);

sha_transform grp_sha_transform_fu_124(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_sha_transform_fu_124_ap_start),
    .ap_done(grp_sha_transform_fu_124_ap_done),
    .ap_idle(grp_sha_transform_fu_124_ap_idle),
    .ap_ready(grp_sha_transform_fu_124_ap_ready),
    .sha_info_data_address0(grp_sha_transform_fu_124_sha_info_data_address0),
    .sha_info_data_ce0(grp_sha_transform_fu_124_sha_info_data_ce0),
    .sha_info_data_q0(sha_info_data_q0),
    .sha_info_data_address1(grp_sha_transform_fu_124_sha_info_data_address1),
    .sha_info_data_ce1(grp_sha_transform_fu_124_sha_info_data_ce1),
    .sha_info_data_q1(sha_info_data_q1),
    .sha_info_digest_address0(grp_sha_transform_fu_124_sha_info_digest_address0),
    .sha_info_digest_ce0(grp_sha_transform_fu_124_sha_info_digest_ce0),
    .sha_info_digest_we0(grp_sha_transform_fu_124_sha_info_digest_we0),
    .sha_info_digest_d0(grp_sha_transform_fu_124_sha_info_digest_d0),
    .sha_info_digest_q0(sha_info_digest_q0),
    .sha_info_digest_address1(grp_sha_transform_fu_124_sha_info_digest_address1),
    .sha_info_digest_ce1(grp_sha_transform_fu_124_sha_info_digest_ce1),
    .sha_info_digest_we1(grp_sha_transform_fu_124_sha_info_digest_we1),
    .sha_info_digest_d1(grp_sha_transform_fu_124_sha_info_digest_d1),
    .sha_info_digest_q1(sha_info_digest_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_sha_transform_fu_124_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state6)) begin
            grp_sha_transform_fu_124_ap_start_reg <= 1'b1;
        end else if ((grp_sha_transform_fu_124_ap_ready == 1'b1)) begin
            grp_sha_transform_fu_124_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln210_fu_132_p2 == 1'd0))) begin
        j_0_reg_102 <= j_fu_138_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        j_0_reg_102 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln210_fu_132_p2 == 1'd1))) begin
        p_1_rec_i_reg_113 <= 64'd0;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln64_fu_163_p2 == 1'd0))) begin
        p_1_rec_i_reg_113 <= add_ln66_fu_169_p2;
    end
end

always @ (*) begin
    if (((grp_sha_transform_fu_124_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_sha_transform_fu_124_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln64_fu_163_p2 == 1'd1))) begin
        sha_info_data_address0 = 4'd14;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln64_fu_163_p2 == 1'd0))) begin
        sha_info_data_address0 = sum_i_cast_fu_154_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sha_info_data_address0 = 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sha_info_data_address0 = grp_sha_transform_fu_124_sha_info_data_address0;
    end else begin
        sha_info_data_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sha_info_data_address1 = 4'd15;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sha_info_data_address1 = grp_sha_transform_fu_124_sha_info_data_address1;
    end else begin
        sha_info_data_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state5) & (icmp_ln64_fu_163_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state5) & (icmp_ln64_fu_163_p2 == 1'd0)))) begin
        sha_info_data_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sha_info_data_ce0 = grp_sha_transform_fu_124_sha_info_data_ce0;
    end else begin
        sha_info_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sha_info_data_ce1 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sha_info_data_ce1 = grp_sha_transform_fu_124_sha_info_data_ce1;
    end else begin
        sha_info_data_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state5) & (icmp_ln64_fu_163_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state5) & (icmp_ln64_fu_163_p2 == 1'd0)))) begin
        sha_info_data_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sha_info_data_d0 = 32'd128;
    end else begin
        sha_info_data_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state5) & (icmp_ln64_fu_163_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state5) & (icmp_ln64_fu_163_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state4) & (icmp_ln210_fu_132_p2 == 1'd1)))) begin
        sha_info_data_we0 = 1'b1;
    end else begin
        sha_info_data_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln64_fu_163_p2 == 1'd1))) begin
        sha_info_data_we1 = 1'b1;
    end else begin
        sha_info_data_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sha_info_digest_address0 = 3'd4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        sha_info_digest_address0 = 3'd1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        sha_info_digest_address0 = 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sha_info_digest_address0 = grp_sha_transform_fu_124_sha_info_digest_address0;
    end else begin
        sha_info_digest_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sha_info_digest_address1 = 3'd3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        sha_info_digest_address1 = 3'd2;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sha_info_digest_address1 = grp_sha_transform_fu_124_sha_info_digest_address1;
    end else begin
        sha_info_digest_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        sha_info_digest_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sha_info_digest_ce0 = grp_sha_transform_fu_124_sha_info_digest_ce0;
    end else begin
        sha_info_digest_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        sha_info_digest_ce1 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sha_info_digest_ce1 = grp_sha_transform_fu_124_sha_info_digest_ce1;
    end else begin
        sha_info_digest_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sha_info_digest_d0 = 32'd3285377520;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        sha_info_digest_d0 = 32'd4023233417;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        sha_info_digest_d0 = 32'd1732584193;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sha_info_digest_d0 = grp_sha_transform_fu_124_sha_info_digest_d0;
    end else begin
        sha_info_digest_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sha_info_digest_d1 = 32'd271733878;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        sha_info_digest_d1 = 32'd2562383102;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sha_info_digest_d1 = grp_sha_transform_fu_124_sha_info_digest_d1;
    end else begin
        sha_info_digest_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        sha_info_digest_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sha_info_digest_we0 = grp_sha_transform_fu_124_sha_info_digest_we0;
    end else begin
        sha_info_digest_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        sha_info_digest_we1 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sha_info_digest_we1 = grp_sha_transform_fu_124_sha_info_digest_we1;
    end else begin
        sha_info_digest_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln210_fu_132_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln64_fu_163_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((grp_sha_transform_fu_124_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln66_fu_169_p2 = (64'd1 + p_1_rec_i_reg_113);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign empty_5_fu_144_p1 = p_1_rec_i_reg_113[5:0];

assign grp_sha_transform_fu_124_ap_start = grp_sha_transform_fu_124_ap_start_reg;

assign icmp_ln210_fu_132_p2 = ((j_0_reg_102 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln64_fu_163_p2 = ((trunc_ln64_fu_159_p1 == 32'd13) ? 1'b1 : 1'b0);

assign j_fu_138_p2 = (j_0_reg_102 + 2'd1);

assign sum_i_cast_fu_154_p1 = sum_i_fu_148_p2;

assign sum_i_fu_148_p2 = (6'd1 + empty_5_fu_144_p1);

assign trunc_ln64_fu_159_p1 = p_1_rec_i_reg_113[31:0];

endmodule //sha_stream
