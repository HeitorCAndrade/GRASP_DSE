// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module sha_transform (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        sha_info_data_address0,
        sha_info_data_ce0,
        sha_info_data_q0,
        sha_info_digest_address0,
        sha_info_digest_ce0,
        sha_info_digest_we0,
        sha_info_digest_d0,
        sha_info_digest_q0,
        sha_info_digest_address1,
        sha_info_digest_ce1,
        sha_info_digest_we1,
        sha_info_digest_d1,
        sha_info_digest_q1
);

parameter    ap_ST_fsm_state1 = 19'd1;
parameter    ap_ST_fsm_state2 = 19'd2;
parameter    ap_ST_fsm_state3 = 19'd4;
parameter    ap_ST_fsm_state4 = 19'd8;
parameter    ap_ST_fsm_state5 = 19'd16;
parameter    ap_ST_fsm_state6 = 19'd32;
parameter    ap_ST_fsm_state7 = 19'd64;
parameter    ap_ST_fsm_state8 = 19'd128;
parameter    ap_ST_fsm_state9 = 19'd256;
parameter    ap_ST_fsm_state10 = 19'd512;
parameter    ap_ST_fsm_state11 = 19'd1024;
parameter    ap_ST_fsm_state12 = 19'd2048;
parameter    ap_ST_fsm_state13 = 19'd4096;
parameter    ap_ST_fsm_state14 = 19'd8192;
parameter    ap_ST_fsm_state15 = 19'd16384;
parameter    ap_ST_fsm_state16 = 19'd32768;
parameter    ap_ST_fsm_state17 = 19'd65536;
parameter    ap_ST_fsm_state18 = 19'd131072;
parameter    ap_ST_fsm_state19 = 19'd262144;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] sha_info_data_address0;
output   sha_info_data_ce0;
input  [31:0] sha_info_data_q0;
output  [2:0] sha_info_digest_address0;
output   sha_info_digest_ce0;
output   sha_info_digest_we0;
output  [31:0] sha_info_digest_d0;
input  [31:0] sha_info_digest_q0;
output  [2:0] sha_info_digest_address1;
output   sha_info_digest_ce1;
output   sha_info_digest_we1;
output  [31:0] sha_info_digest_d1;
input  [31:0] sha_info_digest_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg sha_info_data_ce0;
reg[2:0] sha_info_digest_address0;
reg sha_info_digest_ce0;
reg sha_info_digest_we0;
reg[31:0] sha_info_digest_d0;
reg[2:0] sha_info_digest_address1;
reg sha_info_digest_ce1;
reg sha_info_digest_we1;
reg[31:0] sha_info_digest_d1;

(* fsm_encoding = "none" *) reg   [18:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] i_fu_495_p2;
reg   [4:0] i_reg_1025;
wire    ap_CS_fsm_state2;
wire   [63:0] zext_ln103_fu_501_p1;
reg   [63:0] zext_ln103_reg_1030;
wire   [0:0] icmp_ln101_fu_489_p2;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln105_fu_506_p2;
wire   [31:0] W_q0;
reg   [31:0] W_load_reg_1053;
wire    ap_CS_fsm_state5;
wire   [31:0] W_q1;
reg   [31:0] W_load_1_reg_1058;
wire   [6:0] i_6_fu_578_p2;
wire    ap_CS_fsm_state6;
reg   [31:0] A_reg_1078;
wire    ap_CS_fsm_state7;
reg   [31:0] B_reg_1084;
wire    ap_CS_fsm_state8;
reg   [31:0] C_reg_1090;
reg   [31:0] D_reg_1096;
wire    ap_CS_fsm_state9;
reg   [31:0] E_reg_1102;
wire   [4:0] i_7_fu_590_p2;
reg   [4:0] i_7_reg_1111;
wire    ap_CS_fsm_state10;
wire   [0:0] icmp_ln115_fu_584_p2;
wire   [31:0] temp_fu_665_p2;
wire    ap_CS_fsm_state11;
wire   [31:0] C_1_fu_685_p3;
wire    ap_CS_fsm_state12;
wire   [0:0] icmp_ln119_fu_693_p2;
wire   [5:0] i_8_fu_704_p2;
reg   [5:0] i_8_reg_1139;
wire   [31:0] temp_1_fu_762_p2;
wire    ap_CS_fsm_state13;
wire   [31:0] C_2_fu_782_p3;
wire    ap_CS_fsm_state14;
wire   [0:0] icmp_ln123_fu_790_p2;
wire   [5:0] i_9_fu_801_p2;
reg   [5:0] i_9_reg_1162;
wire   [31:0] temp_2_fu_871_p2;
wire    ap_CS_fsm_state15;
wire   [31:0] C_3_fu_891_p3;
wire    ap_CS_fsm_state16;
wire   [0:0] icmp_ln127_fu_899_p2;
wire   [31:0] add_ln129_2_fu_950_p2;
reg   [31:0] add_ln129_2_reg_1185;
wire   [31:0] C_4_fu_970_p3;
reg   [31:0] C_4_reg_1190;
wire   [6:0] i_10_fu_978_p2;
reg   [6:0] i_10_reg_1195;
wire   [31:0] add_ln134_fu_996_p2;
reg   [31:0] add_ln134_reg_1200;
wire   [31:0] add_ln135_fu_1001_p2;
reg   [31:0] add_ln135_reg_1205;
wire   [31:0] temp_3_fu_1012_p2;
wire    ap_CS_fsm_state17;
wire   [31:0] add_ln136_fu_1017_p2;
reg   [31:0] add_ln136_reg_1215;
wire    ap_CS_fsm_state18;
reg   [6:0] W_address0;
reg    W_ce0;
reg    W_we0;
reg   [6:0] W_address1;
reg    W_ce1;
reg    W_we1;
wire   [31:0] W_d1;
reg   [4:0] i_0_reg_196;
wire    ap_CS_fsm_state3;
reg   [6:0] i_1_reg_207;
reg   [31:0] E_0_reg_219;
reg   [31:0] E_4_reg_229;
reg   [31:0] D_1_reg_240;
reg   [31:0] B_0_reg_251;
reg   [31:0] B_4_reg_261;
reg   [4:0] i_2_reg_272;
reg   [31:0] E_5_reg_294;
reg   [31:0] E_1_reg_283;
reg   [31:0] D_2_reg_306;
reg   [31:0] B_5_reg_329;
reg   [31:0] B_1_reg_318;
reg   [5:0] i_3_reg_341;
reg   [31:0] E_6_reg_363;
reg   [31:0] E_2_reg_352;
reg   [31:0] D_3_reg_375;
reg   [31:0] B_6_reg_398;
reg   [31:0] B_2_reg_387;
reg   [5:0] i_4_reg_410;
reg   [31:0] E_7_reg_432;
reg   [31:0] E_3_reg_421;
reg   [31:0] D_4_reg_444;
reg   [31:0] B_7_reg_466;
reg   [31:0] B_3_reg_456;
reg   [6:0] i_5_reg_478;
wire   [63:0] zext_ln107_fu_518_p1;
wire   [63:0] zext_ln107_1_fu_529_p1;
wire   [63:0] zext_ln107_2_fu_540_p1;
wire   [63:0] zext_ln107_3_fu_551_p1;
wire   [63:0] zext_ln107_4_fu_573_p1;
wire   [63:0] zext_ln117_fu_596_p1;
wire   [63:0] zext_ln121_fu_699_p1;
wire   [63:0] zext_ln125_fu_796_p1;
wire   [63:0] zext_ln129_fu_939_p1;
wire   [31:0] add_ln132_fu_984_p2;
wire   [31:0] add_ln133_fu_990_p2;
wire    ap_CS_fsm_state19;
wire   [6:0] add_ln107_fu_512_p2;
wire   [6:0] add_ln107_1_fu_523_p2;
wire   [6:0] add_ln107_2_fu_534_p2;
wire   [6:0] add_ln107_3_fu_545_p2;
wire   [31:0] xor_ln107_1_fu_560_p2;
wire   [31:0] xor_ln107_fu_556_p2;
wire   [26:0] trunc_ln117_fu_601_p1;
wire   [4:0] lshr_ln_fu_605_p4;
wire   [31:0] xor_ln117_fu_629_p2;
wire   [31:0] and_ln117_fu_623_p2;
wire   [31:0] and_ln117_1_fu_635_p2;
wire   [31:0] or_ln_fu_615_p3;
wire   [31:0] add_ln117_1_fu_653_p2;
wire   [31:0] or_ln117_fu_641_p2;
wire   [31:0] add_ln117_2_fu_659_p2;
wire   [31:0] add_ln117_fu_647_p2;
wire   [1:0] trunc_ln117_1_fu_671_p1;
wire   [29:0] lshr_ln117_1_fu_675_p4;
wire   [26:0] trunc_ln121_fu_710_p1;
wire   [4:0] lshr_ln1_fu_714_p4;
wire   [31:0] xor_ln121_fu_732_p2;
wire   [31:0] or_ln1_fu_724_p3;
wire   [31:0] add_ln121_1_fu_750_p2;
wire   [31:0] xor_ln121_1_fu_738_p2;
wire   [31:0] add_ln121_2_fu_756_p2;
wire   [31:0] add_ln121_fu_744_p2;
wire   [1:0] trunc_ln121_1_fu_768_p1;
wire   [29:0] lshr_ln121_1_fu_772_p4;
wire   [26:0] trunc_ln125_fu_807_p1;
wire   [4:0] lshr_ln2_fu_811_p4;
wire   [31:0] or_ln125_fu_829_p2;
wire   [31:0] and_ln125_fu_835_p2;
wire   [31:0] and_ln125_1_fu_841_p2;
wire   [31:0] or_ln125_1_fu_847_p2;
wire   [31:0] or_ln2_fu_821_p3;
wire   [31:0] add_ln125_1_fu_859_p2;
wire   [31:0] add_ln125_2_fu_865_p2;
wire   [31:0] add_ln125_fu_853_p2;
wire   [1:0] trunc_ln125_1_fu_877_p1;
wire   [29:0] lshr_ln125_1_fu_881_p4;
wire   [26:0] trunc_ln129_fu_905_p1;
wire   [4:0] lshr_ln3_fu_909_p4;
wire   [31:0] xor_ln129_fu_927_p2;
wire   [31:0] or_ln3_fu_919_p3;
wire   [31:0] add_ln129_1_fu_944_p2;
wire   [31:0] xor_ln129_1_fu_933_p2;
wire   [1:0] trunc_ln129_1_fu_956_p1;
wire   [29:0] lshr_ln129_1_fu_960_p4;
wire   [31:0] add_ln129_fu_1006_p2;
reg   [18:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 19'd1;
end

sha_transform_W #(
    .DataWidth( 32 ),
    .AddressRange( 80 ),
    .AddressWidth( 7 ))
W_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(W_address0),
    .ce0(W_ce0),
    .we0(W_we0),
    .d0(sha_info_data_q0),
    .q0(W_q0),
    .address1(W_address1),
    .ce1(W_ce1),
    .we1(W_we1),
    .d1(W_d1),
    .q1(W_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        B_0_reg_251 <= B_4_reg_261;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        B_0_reg_251 <= B_reg_1084;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln115_fu_584_p2 == 1'd1))) begin
        B_1_reg_318 <= B_0_reg_251;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        B_1_reg_318 <= B_5_reg_329;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln119_fu_693_p2 == 1'd1))) begin
        B_2_reg_387 <= B_1_reg_318;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        B_2_reg_387 <= B_6_reg_398;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & (icmp_ln123_fu_790_p2 == 1'd1))) begin
        B_3_reg_456 <= B_2_reg_387;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        B_3_reg_456 <= B_7_reg_466;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        B_4_reg_261 <= temp_fu_665_p2;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        B_4_reg_261 <= A_reg_1078;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln115_fu_584_p2 == 1'd1))) begin
        B_5_reg_329 <= B_4_reg_261;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        B_5_reg_329 <= temp_1_fu_762_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln119_fu_693_p2 == 1'd1))) begin
        B_6_reg_398 <= B_5_reg_329;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        B_6_reg_398 <= temp_2_fu_871_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & (icmp_ln123_fu_790_p2 == 1'd1))) begin
        B_7_reg_466 <= B_6_reg_398;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        B_7_reg_466 <= temp_3_fu_1012_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        D_1_reg_240 <= C_1_fu_685_p3;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        D_1_reg_240 <= C_reg_1090;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln115_fu_584_p2 == 1'd1))) begin
        D_2_reg_306 <= D_1_reg_240;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        D_2_reg_306 <= C_2_fu_782_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln119_fu_693_p2 == 1'd1))) begin
        D_3_reg_375 <= D_2_reg_306;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        D_3_reg_375 <= C_3_fu_891_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & (icmp_ln123_fu_790_p2 == 1'd1))) begin
        D_4_reg_444 <= D_3_reg_375;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        D_4_reg_444 <= C_4_reg_1190;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        E_0_reg_219 <= E_4_reg_229;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        E_0_reg_219 <= sha_info_digest_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln115_fu_584_p2 == 1'd1))) begin
        E_1_reg_283 <= E_0_reg_219;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        E_1_reg_283 <= E_5_reg_294;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln119_fu_693_p2 == 1'd1))) begin
        E_2_reg_352 <= E_1_reg_283;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        E_2_reg_352 <= E_6_reg_363;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & (icmp_ln123_fu_790_p2 == 1'd1))) begin
        E_3_reg_421 <= E_2_reg_352;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        E_3_reg_421 <= E_7_reg_432;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        E_4_reg_229 <= D_1_reg_240;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        E_4_reg_229 <= sha_info_digest_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln115_fu_584_p2 == 1'd1))) begin
        E_5_reg_294 <= E_4_reg_229;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        E_5_reg_294 <= D_2_reg_306;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln119_fu_693_p2 == 1'd1))) begin
        E_6_reg_363 <= E_5_reg_294;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        E_6_reg_363 <= D_3_reg_375;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & (icmp_ln123_fu_790_p2 == 1'd1))) begin
        E_7_reg_432 <= E_6_reg_363;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        E_7_reg_432 <= D_4_reg_444;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_0_reg_196 <= i_reg_1025;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_196 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln101_fu_489_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_1_reg_207 <= 7'd16;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        i_1_reg_207 <= i_6_fu_578_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        i_2_reg_272 <= i_7_reg_1111;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        i_2_reg_272 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln115_fu_584_p2 == 1'd1))) begin
        i_3_reg_341 <= 6'd20;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        i_3_reg_341 <= i_8_reg_1139;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln119_fu_693_p2 == 1'd1))) begin
        i_4_reg_410 <= 6'd40;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        i_4_reg_410 <= i_9_reg_1162;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & (icmp_ln123_fu_790_p2 == 1'd1))) begin
        i_5_reg_478 <= 7'd60;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        i_5_reg_478 <= i_10_reg_1195;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        A_reg_1078 <= sha_info_digest_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        B_reg_1084 <= sha_info_digest_q0;
        C_reg_1090 <= sha_info_digest_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln127_fu_899_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state16))) begin
        C_4_reg_1190 <= C_4_fu_970_p3;
        add_ln129_2_reg_1185 <= add_ln129_2_fu_950_p2;
        i_10_reg_1195 <= i_10_fu_978_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        D_reg_1096 <= sha_info_digest_q1;
        E_reg_1102 <= sha_info_digest_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        W_load_1_reg_1058 <= W_q1;
        W_load_reg_1053 <= W_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state16) & (icmp_ln127_fu_899_p2 == 1'd1))) begin
        add_ln134_reg_1200 <= add_ln134_fu_996_p2;
        add_ln135_reg_1205 <= add_ln135_fu_1001_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        add_ln136_reg_1215 <= add_ln136_fu_1017_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        i_7_reg_1111 <= i_7_fu_590_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln119_fu_693_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        i_8_reg_1139 <= i_8_fu_704_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln123_fu_790_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
        i_9_reg_1162 <= i_9_fu_801_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_1025 <= i_fu_495_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln101_fu_489_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln103_reg_1030[4 : 0] <= zext_ln103_fu_501_p1[4 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        W_address0 = zext_ln125_fu_796_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        W_address0 = zext_ln117_fu_596_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        W_address0 = zext_ln107_3_fu_551_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        W_address0 = zext_ln107_fu_518_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        W_address0 = zext_ln103_reg_1030;
    end else begin
        W_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        W_address1 = zext_ln129_fu_939_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        W_address1 = zext_ln121_fu_699_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        W_address1 = zext_ln107_4_fu_573_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        W_address1 = zext_ln107_2_fu_540_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        W_address1 = zext_ln107_1_fu_529_p1;
    end else begin
        W_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state10))) begin
        W_ce0 = 1'b1;
    end else begin
        W_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state6))) begin
        W_ce1 = 1'b1;
    end else begin
        W_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        W_we0 = 1'b1;
    end else begin
        W_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        W_we1 = 1'b1;
    end else begin
        W_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        sha_info_data_ce0 = 1'b1;
    end else begin
        sha_info_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        sha_info_digest_address0 = 3'd3;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        sha_info_digest_address0 = 3'd4;
    end else if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state7))) begin
        sha_info_digest_address0 = 3'd1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sha_info_digest_address0 = 3'd0;
    end else begin
        sha_info_digest_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        sha_info_digest_address1 = 3'd4;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        sha_info_digest_address1 = 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        sha_info_digest_address1 = 3'd3;
    end else if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state7))) begin
        sha_info_digest_address1 = 3'd2;
    end else begin
        sha_info_digest_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7))) begin
        sha_info_digest_ce0 = 1'b1;
    end else begin
        sha_info_digest_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7))) begin
        sha_info_digest_ce1 = 1'b1;
    end else begin
        sha_info_digest_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        sha_info_digest_d0 = add_ln135_reg_1205;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        sha_info_digest_d0 = add_ln133_fu_990_p2;
    end else begin
        sha_info_digest_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        sha_info_digest_d1 = add_ln136_reg_1215;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        sha_info_digest_d1 = add_ln134_reg_1200;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        sha_info_digest_d1 = add_ln132_fu_984_p2;
    end else begin
        sha_info_digest_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | ((1'b1 == ap_CS_fsm_state16) & (icmp_ln127_fu_899_p2 == 1'd1)))) begin
        sha_info_digest_we0 = 1'b1;
    end else begin
        sha_info_digest_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | ((1'b1 == ap_CS_fsm_state16) & (icmp_ln127_fu_899_p2 == 1'd1)))) begin
        sha_info_digest_we1 = 1'b1;
    end else begin
        sha_info_digest_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln101_fu_489_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln105_fu_506_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln115_fu_584_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln119_fu_693_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state14 : begin
            if (((1'b1 == ap_CS_fsm_state14) & (icmp_ln123_fu_790_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state16 : begin
            if (((1'b1 == ap_CS_fsm_state16) & (icmp_ln127_fu_899_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign C_1_fu_685_p3 = {{trunc_ln117_1_fu_671_p1}, {lshr_ln117_1_fu_675_p4}};

assign C_2_fu_782_p3 = {{trunc_ln121_1_fu_768_p1}, {lshr_ln121_1_fu_772_p4}};

assign C_3_fu_891_p3 = {{trunc_ln125_1_fu_877_p1}, {lshr_ln125_1_fu_881_p4}};

assign C_4_fu_970_p3 = {{trunc_ln129_1_fu_956_p1}, {lshr_ln129_1_fu_960_p4}};

assign W_d1 = (xor_ln107_fu_556_p2 ^ xor_ln107_1_fu_560_p2);

assign add_ln107_1_fu_523_p2 = ($signed(i_1_reg_207) + $signed(7'd120));

assign add_ln107_2_fu_534_p2 = ($signed(i_1_reg_207) + $signed(7'd114));

assign add_ln107_3_fu_545_p2 = ($signed(i_1_reg_207) + $signed(7'd112));

assign add_ln107_fu_512_p2 = ($signed(i_1_reg_207) + $signed(7'd125));

assign add_ln117_1_fu_653_p2 = (32'd1518500249 + or_ln_fu_615_p3);

assign add_ln117_2_fu_659_p2 = (add_ln117_1_fu_653_p2 + or_ln117_fu_641_p2);

assign add_ln117_fu_647_p2 = (W_q0 + E_0_reg_219);

assign add_ln121_1_fu_750_p2 = (32'd1859775393 + or_ln1_fu_724_p3);

assign add_ln121_2_fu_756_p2 = (add_ln121_1_fu_750_p2 + xor_ln121_1_fu_738_p2);

assign add_ln121_fu_744_p2 = (W_q1 + E_1_reg_283);

assign add_ln125_1_fu_859_p2 = (or_ln125_1_fu_847_p2 + or_ln2_fu_821_p3);

assign add_ln125_2_fu_865_p2 = ($signed(32'd2400959708) + $signed(add_ln125_1_fu_859_p2));

assign add_ln125_fu_853_p2 = (W_q0 + E_2_reg_352);

assign add_ln129_1_fu_944_p2 = ($signed(32'd3395469782) + $signed(or_ln3_fu_919_p3));

assign add_ln129_2_fu_950_p2 = (add_ln129_1_fu_944_p2 + xor_ln129_1_fu_933_p2);

assign add_ln129_fu_1006_p2 = (W_q1 + E_3_reg_421);

assign add_ln132_fu_984_p2 = (A_reg_1078 + B_7_reg_466);

assign add_ln133_fu_990_p2 = (B_reg_1084 + B_3_reg_456);

assign add_ln134_fu_996_p2 = (C_reg_1090 + D_4_reg_444);

assign add_ln135_fu_1001_p2 = (D_reg_1096 + E_7_reg_432);

assign add_ln136_fu_1017_p2 = (E_reg_1102 + E_3_reg_421);

assign and_ln117_1_fu_635_p2 = (xor_ln117_fu_629_p2 & E_4_reg_229);

assign and_ln117_fu_623_p2 = (D_1_reg_240 & B_0_reg_251);

assign and_ln125_1_fu_841_p2 = (E_6_reg_363 & D_3_reg_375);

assign and_ln125_fu_835_p2 = (or_ln125_fu_829_p2 & B_2_reg_387);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign i_10_fu_978_p2 = (7'd1 + i_5_reg_478);

assign i_6_fu_578_p2 = (i_1_reg_207 + 7'd1);

assign i_7_fu_590_p2 = (i_2_reg_272 + 5'd1);

assign i_8_fu_704_p2 = (6'd1 + i_3_reg_341);

assign i_9_fu_801_p2 = (6'd1 + i_4_reg_410);

assign i_fu_495_p2 = (i_0_reg_196 + 5'd1);

assign icmp_ln101_fu_489_p2 = ((i_0_reg_196 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln105_fu_506_p2 = ((i_1_reg_207 == 7'd80) ? 1'b1 : 1'b0);

assign icmp_ln115_fu_584_p2 = ((i_2_reg_272 == 5'd20) ? 1'b1 : 1'b0);

assign icmp_ln119_fu_693_p2 = ((i_3_reg_341 == 6'd40) ? 1'b1 : 1'b0);

assign icmp_ln123_fu_790_p2 = ((i_4_reg_410 == 6'd60) ? 1'b1 : 1'b0);

assign icmp_ln127_fu_899_p2 = ((i_5_reg_478 == 7'd80) ? 1'b1 : 1'b0);

assign lshr_ln117_1_fu_675_p4 = {{B_0_reg_251[31:2]}};

assign lshr_ln121_1_fu_772_p4 = {{B_1_reg_318[31:2]}};

assign lshr_ln125_1_fu_881_p4 = {{B_2_reg_387[31:2]}};

assign lshr_ln129_1_fu_960_p4 = {{B_3_reg_456[31:2]}};

assign lshr_ln1_fu_714_p4 = {{B_5_reg_329[31:27]}};

assign lshr_ln2_fu_811_p4 = {{B_6_reg_398[31:27]}};

assign lshr_ln3_fu_909_p4 = {{B_7_reg_466[31:27]}};

assign lshr_ln_fu_605_p4 = {{B_4_reg_261[31:27]}};

assign or_ln117_fu_641_p2 = (and_ln117_fu_623_p2 | and_ln117_1_fu_635_p2);

assign or_ln125_1_fu_847_p2 = (and_ln125_fu_835_p2 | and_ln125_1_fu_841_p2);

assign or_ln125_fu_829_p2 = (E_6_reg_363 | D_3_reg_375);

assign or_ln1_fu_724_p3 = {{trunc_ln121_fu_710_p1}, {lshr_ln1_fu_714_p4}};

assign or_ln2_fu_821_p3 = {{trunc_ln125_fu_807_p1}, {lshr_ln2_fu_811_p4}};

assign or_ln3_fu_919_p3 = {{trunc_ln129_fu_905_p1}, {lshr_ln3_fu_909_p4}};

assign or_ln_fu_615_p3 = {{trunc_ln117_fu_601_p1}, {lshr_ln_fu_605_p4}};

assign sha_info_data_address0 = zext_ln103_fu_501_p1;

assign temp_1_fu_762_p2 = (add_ln121_2_fu_756_p2 + add_ln121_fu_744_p2);

assign temp_2_fu_871_p2 = (add_ln125_2_fu_865_p2 + add_ln125_fu_853_p2);

assign temp_3_fu_1012_p2 = (add_ln129_2_reg_1185 + add_ln129_fu_1006_p2);

assign temp_fu_665_p2 = (add_ln117_2_fu_659_p2 + add_ln117_fu_647_p2);

assign trunc_ln117_1_fu_671_p1 = B_0_reg_251[1:0];

assign trunc_ln117_fu_601_p1 = B_4_reg_261[26:0];

assign trunc_ln121_1_fu_768_p1 = B_1_reg_318[1:0];

assign trunc_ln121_fu_710_p1 = B_5_reg_329[26:0];

assign trunc_ln125_1_fu_877_p1 = B_2_reg_387[1:0];

assign trunc_ln125_fu_807_p1 = B_6_reg_398[26:0];

assign trunc_ln129_1_fu_956_p1 = B_3_reg_456[1:0];

assign trunc_ln129_fu_905_p1 = B_7_reg_466[26:0];

assign xor_ln107_1_fu_560_p2 = (W_q1 ^ W_q0);

assign xor_ln107_fu_556_p2 = (W_load_reg_1053 ^ W_load_1_reg_1058);

assign xor_ln117_fu_629_p2 = (32'd4294967295 ^ B_0_reg_251);

assign xor_ln121_1_fu_738_p2 = (xor_ln121_fu_732_p2 ^ D_2_reg_306);

assign xor_ln121_fu_732_p2 = (E_5_reg_294 ^ B_1_reg_318);

assign xor_ln129_1_fu_933_p2 = (xor_ln129_fu_927_p2 ^ D_4_reg_444);

assign xor_ln129_fu_927_p2 = (E_7_reg_432 ^ B_3_reg_456);

assign zext_ln103_fu_501_p1 = i_0_reg_196;

assign zext_ln107_1_fu_529_p1 = add_ln107_1_fu_523_p2;

assign zext_ln107_2_fu_540_p1 = add_ln107_2_fu_534_p2;

assign zext_ln107_3_fu_551_p1 = add_ln107_3_fu_545_p2;

assign zext_ln107_4_fu_573_p1 = i_1_reg_207;

assign zext_ln107_fu_518_p1 = add_ln107_fu_512_p2;

assign zext_ln117_fu_596_p1 = i_2_reg_272;

assign zext_ln121_fu_699_p1 = i_3_reg_341;

assign zext_ln125_fu_796_p1 = i_4_reg_410;

assign zext_ln129_fu_939_p1 = i_5_reg_478;

always @ (posedge ap_clk) begin
    zext_ln103_reg_1030[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
end

endmodule //sha_transform
