-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sha_stream is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC );
end;


architecture behav of sha_stream is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "sha_stream,hls_ip_2020_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-flgb2104-1-e,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.883000,HLS_SYN_LAT=416,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=0,HLS_SYN_FF=1187,HLS_SYN_LUT=2286,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_67452301 : STD_LOGIC_VECTOR (31 downto 0) := "01100111010001010010001100000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_EFCDAB89 : STD_LOGIC_VECTOR (31 downto 0) := "11101111110011011010101110001001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_98BADCFE : STD_LOGIC_VECTOR (31 downto 0) := "10011000101110101101110011111110";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv32_10325476 : STD_LOGIC_VECTOR (31 downto 0) := "00010000001100100101010001110110";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv32_C3D2E1F0 : STD_LOGIC_VECTOR (31 downto 0) := "11000011110100101110000111110000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal sha_info_data_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal sha_info_data_ce0 : STD_LOGIC;
    signal sha_info_data_we0 : STD_LOGIC;
    signal sha_info_data_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha_info_data_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha_info_data_ce1 : STD_LOGIC;
    signal sha_info_data_we1 : STD_LOGIC;
    signal sha_info_digest_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sha_info_digest_ce0 : STD_LOGIC;
    signal sha_info_digest_we0 : STD_LOGIC;
    signal sha_info_digest_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha_info_digest_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha_info_digest_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sha_info_digest_ce1 : STD_LOGIC;
    signal sha_info_digest_we1 : STD_LOGIC;
    signal sha_info_digest_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sha_info_digest_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_fu_138_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal add_ln66_fu_169_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_sha_transform_fu_124_ap_start : STD_LOGIC;
    signal grp_sha_transform_fu_124_ap_done : STD_LOGIC;
    signal grp_sha_transform_fu_124_ap_idle : STD_LOGIC;
    signal grp_sha_transform_fu_124_ap_ready : STD_LOGIC;
    signal grp_sha_transform_fu_124_sha_info_data_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_sha_transform_fu_124_sha_info_data_ce0 : STD_LOGIC;
    signal grp_sha_transform_fu_124_sha_info_digest_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_sha_transform_fu_124_sha_info_digest_ce0 : STD_LOGIC;
    signal grp_sha_transform_fu_124_sha_info_digest_we0 : STD_LOGIC;
    signal grp_sha_transform_fu_124_sha_info_digest_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sha_transform_fu_124_sha_info_digest_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_sha_transform_fu_124_sha_info_digest_ce1 : STD_LOGIC;
    signal grp_sha_transform_fu_124_sha_info_digest_we1 : STD_LOGIC;
    signal grp_sha_transform_fu_124_sha_info_digest_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_0_reg_102 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln210_fu_132_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_1_rec_i_reg_113 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln64_fu_163_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_sha_transform_fu_124_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal sum_i_cast_fu_154_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal empty_10_fu_144_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sum_i_fu_148_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln64_fu_159_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);

    component sha_transform IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        sha_info_data_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        sha_info_data_ce0 : OUT STD_LOGIC;
        sha_info_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        sha_info_digest_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        sha_info_digest_ce0 : OUT STD_LOGIC;
        sha_info_digest_we0 : OUT STD_LOGIC;
        sha_info_digest_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        sha_info_digest_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        sha_info_digest_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        sha_info_digest_ce1 : OUT STD_LOGIC;
        sha_info_digest_we1 : OUT STD_LOGIC;
        sha_info_digest_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        sha_info_digest_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sha_stream_sha_inbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sha_stream_sha_incud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    sha_info_data_U : component sha_stream_sha_inbkb
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sha_info_data_address0,
        ce0 => sha_info_data_ce0,
        we0 => sha_info_data_we0,
        d0 => sha_info_data_d0,
        q0 => sha_info_data_q0,
        address1 => ap_const_lv4_F,
        ce1 => sha_info_data_ce1,
        we1 => sha_info_data_we1,
        d1 => ap_const_lv32_0);

    sha_info_digest_U : component sha_stream_sha_incud
    generic map (
        DataWidth => 32,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sha_info_digest_address0,
        ce0 => sha_info_digest_ce0,
        we0 => sha_info_digest_we0,
        d0 => sha_info_digest_d0,
        q0 => sha_info_digest_q0,
        address1 => sha_info_digest_address1,
        ce1 => sha_info_digest_ce1,
        we1 => sha_info_digest_we1,
        d1 => sha_info_digest_d1,
        q1 => sha_info_digest_q1);

    grp_sha_transform_fu_124 : component sha_transform
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sha_transform_fu_124_ap_start,
        ap_done => grp_sha_transform_fu_124_ap_done,
        ap_idle => grp_sha_transform_fu_124_ap_idle,
        ap_ready => grp_sha_transform_fu_124_ap_ready,
        sha_info_data_address0 => grp_sha_transform_fu_124_sha_info_data_address0,
        sha_info_data_ce0 => grp_sha_transform_fu_124_sha_info_data_ce0,
        sha_info_data_q0 => sha_info_data_q0,
        sha_info_digest_address0 => grp_sha_transform_fu_124_sha_info_digest_address0,
        sha_info_digest_ce0 => grp_sha_transform_fu_124_sha_info_digest_ce0,
        sha_info_digest_we0 => grp_sha_transform_fu_124_sha_info_digest_we0,
        sha_info_digest_d0 => grp_sha_transform_fu_124_sha_info_digest_d0,
        sha_info_digest_q0 => sha_info_digest_q0,
        sha_info_digest_address1 => grp_sha_transform_fu_124_sha_info_digest_address1,
        sha_info_digest_ce1 => grp_sha_transform_fu_124_sha_info_digest_ce1,
        sha_info_digest_we1 => grp_sha_transform_fu_124_sha_info_digest_we1,
        sha_info_digest_d1 => grp_sha_transform_fu_124_sha_info_digest_d1,
        sha_info_digest_q1 => sha_info_digest_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_sha_transform_fu_124_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sha_transform_fu_124_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    grp_sha_transform_fu_124_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sha_transform_fu_124_ap_ready = ap_const_logic_1)) then 
                    grp_sha_transform_fu_124_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    j_0_reg_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln210_fu_132_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                j_0_reg_102 <= j_fu_138_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                j_0_reg_102 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    p_1_rec_i_reg_113_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln210_fu_132_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                p_1_rec_i_reg_113 <= ap_const_lv64_0;
            elsif (((icmp_ln64_fu_163_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                p_1_rec_i_reg_113 <= add_ln66_fu_169_p2;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state4, ap_CS_fsm_state5, grp_sha_transform_fu_124_ap_done, icmp_ln210_fu_132_p2, icmp_ln64_fu_163_p2, ap_CS_fsm_state7)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln210_fu_132_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln64_fu_163_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((grp_sha_transform_fu_124_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    add_ln66_fu_169_p2 <= std_logic_vector(unsigned(ap_const_lv64_1) + unsigned(p_1_rec_i_reg_113));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_done_assign_proc : process(grp_sha_transform_fu_124_ap_done, ap_CS_fsm_state7)
    begin
        if (((grp_sha_transform_fu_124_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_sha_transform_fu_124_ap_done, ap_CS_fsm_state7)
    begin
        if (((grp_sha_transform_fu_124_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    empty_10_fu_144_p1 <= p_1_rec_i_reg_113(6 - 1 downto 0);
    grp_sha_transform_fu_124_ap_start <= grp_sha_transform_fu_124_ap_start_reg;
    icmp_ln210_fu_132_p2 <= "1" when (j_0_reg_102 = ap_const_lv2_2) else "0";
    icmp_ln64_fu_163_p2 <= "1" when (trunc_ln64_fu_159_p1 = ap_const_lv32_D) else "0";
    j_fu_138_p2 <= std_logic_vector(unsigned(j_0_reg_102) + unsigned(ap_const_lv2_1));

    sha_info_data_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, grp_sha_transform_fu_124_sha_info_data_address0, icmp_ln64_fu_163_p2, ap_CS_fsm_state7, sum_i_cast_fu_154_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln64_fu_163_p2 = ap_const_lv1_1))) then 
            sha_info_data_address0 <= ap_const_lv4_E;
        elsif (((icmp_ln64_fu_163_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            sha_info_data_address0 <= sum_i_cast_fu_154_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sha_info_data_address0 <= ap_const_lv4_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sha_info_data_address0 <= grp_sha_transform_fu_124_sha_info_data_address0;
        else 
            sha_info_data_address0 <= "XXXX";
        end if; 
    end process;


    sha_info_data_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, grp_sha_transform_fu_124_sha_info_data_ce0, icmp_ln64_fu_163_p2, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln64_fu_163_p2 = ap_const_lv1_1)) or ((icmp_ln64_fu_163_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            sha_info_data_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sha_info_data_ce0 <= grp_sha_transform_fu_124_sha_info_data_ce0;
        else 
            sha_info_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sha_info_data_ce1_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            sha_info_data_ce1 <= ap_const_logic_1;
        else 
            sha_info_data_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sha_info_data_d0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, icmp_ln64_fu_163_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln64_fu_163_p2 = ap_const_lv1_1)) or ((icmp_ln64_fu_163_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            sha_info_data_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sha_info_data_d0 <= ap_const_lv32_80;
        else 
            sha_info_data_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sha_info_data_we0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, icmp_ln210_fu_132_p2, icmp_ln64_fu_163_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln64_fu_163_p2 = ap_const_lv1_1)) or ((icmp_ln64_fu_163_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((icmp_ln210_fu_132_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            sha_info_data_we0 <= ap_const_logic_1;
        else 
            sha_info_data_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sha_info_data_we1_assign_proc : process(ap_CS_fsm_state5, icmp_ln64_fu_163_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln64_fu_163_p2 = ap_const_lv1_1))) then 
            sha_info_data_we1 <= ap_const_logic_1;
        else 
            sha_info_data_we1 <= ap_const_logic_0;
        end if; 
    end process;


    sha_info_digest_address0_assign_proc : process(ap_CS_fsm_state1, grp_sha_transform_fu_124_sha_info_digest_address0, ap_CS_fsm_state3, ap_CS_fsm_state7, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sha_info_digest_address0 <= ap_const_lv3_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sha_info_digest_address0 <= ap_const_lv3_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            sha_info_digest_address0 <= ap_const_lv3_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sha_info_digest_address0 <= grp_sha_transform_fu_124_sha_info_digest_address0;
        else 
            sha_info_digest_address0 <= "XXX";
        end if; 
    end process;


    sha_info_digest_address1_assign_proc : process(grp_sha_transform_fu_124_sha_info_digest_address1, ap_CS_fsm_state3, ap_CS_fsm_state7, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sha_info_digest_address1 <= ap_const_lv3_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sha_info_digest_address1 <= ap_const_lv3_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sha_info_digest_address1 <= grp_sha_transform_fu_124_sha_info_digest_address1;
        else 
            sha_info_digest_address1 <= "XXX";
        end if; 
    end process;


    sha_info_digest_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_sha_transform_fu_124_sha_info_digest_ce0, ap_CS_fsm_state3, ap_CS_fsm_state7, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            sha_info_digest_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sha_info_digest_ce0 <= grp_sha_transform_fu_124_sha_info_digest_ce0;
        else 
            sha_info_digest_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sha_info_digest_ce1_assign_proc : process(grp_sha_transform_fu_124_sha_info_digest_ce1, ap_CS_fsm_state3, ap_CS_fsm_state7, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            sha_info_digest_ce1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sha_info_digest_ce1 <= grp_sha_transform_fu_124_sha_info_digest_ce1;
        else 
            sha_info_digest_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sha_info_digest_d0_assign_proc : process(ap_CS_fsm_state1, grp_sha_transform_fu_124_sha_info_digest_d0, ap_CS_fsm_state3, ap_CS_fsm_state7, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sha_info_digest_d0 <= ap_const_lv32_C3D2E1F0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sha_info_digest_d0 <= ap_const_lv32_EFCDAB89;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            sha_info_digest_d0 <= ap_const_lv32_67452301;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sha_info_digest_d0 <= grp_sha_transform_fu_124_sha_info_digest_d0;
        else 
            sha_info_digest_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sha_info_digest_d1_assign_proc : process(grp_sha_transform_fu_124_sha_info_digest_d1, ap_CS_fsm_state3, ap_CS_fsm_state7, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            sha_info_digest_d1 <= ap_const_lv32_10325476;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sha_info_digest_d1 <= ap_const_lv32_98BADCFE;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sha_info_digest_d1 <= grp_sha_transform_fu_124_sha_info_digest_d1;
        else 
            sha_info_digest_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sha_info_digest_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_sha_transform_fu_124_sha_info_digest_we0, ap_CS_fsm_state3, ap_CS_fsm_state7, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            sha_info_digest_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sha_info_digest_we0 <= grp_sha_transform_fu_124_sha_info_digest_we0;
        else 
            sha_info_digest_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sha_info_digest_we1_assign_proc : process(grp_sha_transform_fu_124_sha_info_digest_we1, ap_CS_fsm_state3, ap_CS_fsm_state7, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            sha_info_digest_we1 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            sha_info_digest_we1 <= grp_sha_transform_fu_124_sha_info_digest_we1;
        else 
            sha_info_digest_we1 <= ap_const_logic_0;
        end if; 
    end process;

    sum_i_cast_fu_154_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_i_fu_148_p2),64));
    sum_i_fu_148_p2 <= std_logic_vector(unsigned(ap_const_lv6_1) + unsigned(empty_10_fu_144_p1));
    trunc_ln64_fu_159_p1 <= p_1_rec_i_reg_113(32 - 1 downto 0);
end behav;
