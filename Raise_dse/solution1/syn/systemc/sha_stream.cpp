// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "sha_stream.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic sha_stream::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic sha_stream::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<7> sha_stream::ap_ST_fsm_state1 = "1";
const sc_lv<7> sha_stream::ap_ST_fsm_state2 = "10";
const sc_lv<7> sha_stream::ap_ST_fsm_state3 = "100";
const sc_lv<7> sha_stream::ap_ST_fsm_state4 = "1000";
const sc_lv<7> sha_stream::ap_ST_fsm_state5 = "10000";
const sc_lv<7> sha_stream::ap_ST_fsm_state6 = "100000";
const sc_lv<7> sha_stream::ap_ST_fsm_state7 = "1000000";
const sc_lv<32> sha_stream::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> sha_stream::ap_const_lv32_3 = "11";
const sc_lv<32> sha_stream::ap_const_lv32_4 = "100";
const sc_lv<2> sha_stream::ap_const_lv2_0 = "00";
const sc_lv<32> sha_stream::ap_const_lv32_2 = "10";
const sc_lv<1> sha_stream::ap_const_lv1_0 = "0";
const sc_lv<64> sha_stream::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<1> sha_stream::ap_const_lv1_1 = "1";
const sc_lv<32> sha_stream::ap_const_lv32_5 = "101";
const sc_lv<32> sha_stream::ap_const_lv32_6 = "110";
const sc_lv<32> sha_stream::ap_const_lv32_67452301 = "1100111010001010010001100000001";
const sc_lv<3> sha_stream::ap_const_lv3_0 = "000";
const sc_lv<32> sha_stream::ap_const_lv32_1 = "1";
const sc_lv<32> sha_stream::ap_const_lv32_EFCDAB89 = "11101111110011011010101110001001";
const sc_lv<3> sha_stream::ap_const_lv3_1 = "1";
const sc_lv<32> sha_stream::ap_const_lv32_98BADCFE = "10011000101110101101110011111110";
const sc_lv<3> sha_stream::ap_const_lv3_2 = "10";
const sc_lv<32> sha_stream::ap_const_lv32_10325476 = "10000001100100101010001110110";
const sc_lv<3> sha_stream::ap_const_lv3_3 = "11";
const sc_lv<32> sha_stream::ap_const_lv32_C3D2E1F0 = "11000011110100101110000111110000";
const sc_lv<3> sha_stream::ap_const_lv3_4 = "100";
const sc_lv<32> sha_stream::ap_const_lv32_80 = "10000000";
const sc_lv<4> sha_stream::ap_const_lv4_0 = "0000";
const sc_lv<4> sha_stream::ap_const_lv4_E = "1110";
const sc_lv<4> sha_stream::ap_const_lv4_F = "1111";
const sc_lv<2> sha_stream::ap_const_lv2_2 = "10";
const sc_lv<2> sha_stream::ap_const_lv2_1 = "1";
const sc_lv<6> sha_stream::ap_const_lv6_1 = "1";
const sc_lv<32> sha_stream::ap_const_lv32_D = "1101";
const sc_lv<64> sha_stream::ap_const_lv64_1 = "1";
const bool sha_stream::ap_const_boolean_1 = true;

sha_stream::sha_stream(sc_module_name name) : sc_module(name), mVcdFile(0) {
    sha_info_data_U = new sha_stream_sha_inbkb("sha_info_data_U");
    sha_info_data_U->clk(ap_clk);
    sha_info_data_U->reset(ap_rst);
    sha_info_data_U->address0(sha_info_data_address0);
    sha_info_data_U->ce0(sha_info_data_ce0);
    sha_info_data_U->we0(sha_info_data_we0);
    sha_info_data_U->d0(sha_info_data_d0);
    sha_info_data_U->q0(sha_info_data_q0);
    sha_info_data_U->address1(ap_var_for_const0);
    sha_info_data_U->ce1(sha_info_data_ce1);
    sha_info_data_U->we1(sha_info_data_we1);
    sha_info_data_U->d1(ap_var_for_const1);
    sha_info_digest_U = new sha_stream_sha_incud("sha_info_digest_U");
    sha_info_digest_U->clk(ap_clk);
    sha_info_digest_U->reset(ap_rst);
    sha_info_digest_U->address0(sha_info_digest_address0);
    sha_info_digest_U->ce0(sha_info_digest_ce0);
    sha_info_digest_U->we0(sha_info_digest_we0);
    sha_info_digest_U->d0(sha_info_digest_d0);
    sha_info_digest_U->q0(sha_info_digest_q0);
    sha_info_digest_U->address1(sha_info_digest_address1);
    sha_info_digest_U->ce1(sha_info_digest_ce1);
    sha_info_digest_U->we1(sha_info_digest_we1);
    sha_info_digest_U->d1(sha_info_digest_d1);
    sha_info_digest_U->q1(sha_info_digest_q1);
    grp_sha_transform_fu_124 = new sha_transform("grp_sha_transform_fu_124");
    grp_sha_transform_fu_124->ap_clk(ap_clk);
    grp_sha_transform_fu_124->ap_rst(ap_rst);
    grp_sha_transform_fu_124->ap_start(grp_sha_transform_fu_124_ap_start);
    grp_sha_transform_fu_124->ap_done(grp_sha_transform_fu_124_ap_done);
    grp_sha_transform_fu_124->ap_idle(grp_sha_transform_fu_124_ap_idle);
    grp_sha_transform_fu_124->ap_ready(grp_sha_transform_fu_124_ap_ready);
    grp_sha_transform_fu_124->sha_info_data_address0(grp_sha_transform_fu_124_sha_info_data_address0);
    grp_sha_transform_fu_124->sha_info_data_ce0(grp_sha_transform_fu_124_sha_info_data_ce0);
    grp_sha_transform_fu_124->sha_info_data_q0(sha_info_data_q0);
    grp_sha_transform_fu_124->sha_info_digest_address0(grp_sha_transform_fu_124_sha_info_digest_address0);
    grp_sha_transform_fu_124->sha_info_digest_ce0(grp_sha_transform_fu_124_sha_info_digest_ce0);
    grp_sha_transform_fu_124->sha_info_digest_we0(grp_sha_transform_fu_124_sha_info_digest_we0);
    grp_sha_transform_fu_124->sha_info_digest_d0(grp_sha_transform_fu_124_sha_info_digest_d0);
    grp_sha_transform_fu_124->sha_info_digest_q0(sha_info_digest_q0);
    grp_sha_transform_fu_124->sha_info_digest_address1(grp_sha_transform_fu_124_sha_info_digest_address1);
    grp_sha_transform_fu_124->sha_info_digest_ce1(grp_sha_transform_fu_124_sha_info_digest_ce1);
    grp_sha_transform_fu_124->sha_info_digest_we1(grp_sha_transform_fu_124_sha_info_digest_we1);
    grp_sha_transform_fu_124->sha_info_digest_d1(grp_sha_transform_fu_124_sha_info_digest_d1);
    grp_sha_transform_fu_124->sha_info_digest_q1(sha_info_digest_q1);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln66_fu_169_p2);
    sensitive << ( p_1_rec_i_reg_113 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( grp_sha_transform_fu_124_ap_done );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( grp_sha_transform_fu_124_ap_done );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_empty_10_fu_144_p1);
    sensitive << ( p_1_rec_i_reg_113 );

    SC_METHOD(thread_grp_sha_transform_fu_124_ap_start);
    sensitive << ( grp_sha_transform_fu_124_ap_start_reg );

    SC_METHOD(thread_icmp_ln210_fu_132_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( j_0_reg_102 );

    SC_METHOD(thread_icmp_ln64_fu_163_p2);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( trunc_ln64_fu_159_p1 );

    SC_METHOD(thread_j_fu_138_p2);
    sensitive << ( j_0_reg_102 );

    SC_METHOD(thread_sha_info_data_address0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( grp_sha_transform_fu_124_sha_info_data_address0 );
    sensitive << ( icmp_ln64_fu_163_p2 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( sum_i_cast_fu_154_p1 );

    SC_METHOD(thread_sha_info_data_ce0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( grp_sha_transform_fu_124_sha_info_data_ce0 );
    sensitive << ( icmp_ln64_fu_163_p2 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_sha_info_data_ce1);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_sha_info_data_d0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( icmp_ln64_fu_163_p2 );

    SC_METHOD(thread_sha_info_data_we0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( icmp_ln210_fu_132_p2 );
    sensitive << ( icmp_ln64_fu_163_p2 );

    SC_METHOD(thread_sha_info_data_we1);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( icmp_ln64_fu_163_p2 );

    SC_METHOD(thread_sha_info_digest_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( grp_sha_transform_fu_124_sha_info_digest_address0 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_sha_info_digest_address1);
    sensitive << ( grp_sha_transform_fu_124_sha_info_digest_address1 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_sha_info_digest_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( grp_sha_transform_fu_124_sha_info_digest_ce0 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_sha_info_digest_ce1);
    sensitive << ( grp_sha_transform_fu_124_sha_info_digest_ce1 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_sha_info_digest_d0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( grp_sha_transform_fu_124_sha_info_digest_d0 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_sha_info_digest_d1);
    sensitive << ( grp_sha_transform_fu_124_sha_info_digest_d1 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_sha_info_digest_we0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( grp_sha_transform_fu_124_sha_info_digest_we0 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_sha_info_digest_we1);
    sensitive << ( grp_sha_transform_fu_124_sha_info_digest_we1 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_sum_i_cast_fu_154_p1);
    sensitive << ( sum_i_fu_148_p2 );

    SC_METHOD(thread_sum_i_fu_148_p2);
    sensitive << ( empty_10_fu_144_p1 );

    SC_METHOD(thread_trunc_ln64_fu_159_p1);
    sensitive << ( p_1_rec_i_reg_113 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( grp_sha_transform_fu_124_ap_done );
    sensitive << ( icmp_ln210_fu_132_p2 );
    sensitive << ( icmp_ln64_fu_163_p2 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "0000001";
    grp_sha_transform_fu_124_ap_start_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "sha_stream_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, sha_info_data_address0, "sha_info_data_address0");
    sc_trace(mVcdFile, sha_info_data_ce0, "sha_info_data_ce0");
    sc_trace(mVcdFile, sha_info_data_we0, "sha_info_data_we0");
    sc_trace(mVcdFile, sha_info_data_d0, "sha_info_data_d0");
    sc_trace(mVcdFile, sha_info_data_q0, "sha_info_data_q0");
    sc_trace(mVcdFile, sha_info_data_ce1, "sha_info_data_ce1");
    sc_trace(mVcdFile, sha_info_data_we1, "sha_info_data_we1");
    sc_trace(mVcdFile, sha_info_digest_address0, "sha_info_digest_address0");
    sc_trace(mVcdFile, sha_info_digest_ce0, "sha_info_digest_ce0");
    sc_trace(mVcdFile, sha_info_digest_we0, "sha_info_digest_we0");
    sc_trace(mVcdFile, sha_info_digest_d0, "sha_info_digest_d0");
    sc_trace(mVcdFile, sha_info_digest_q0, "sha_info_digest_q0");
    sc_trace(mVcdFile, sha_info_digest_address1, "sha_info_digest_address1");
    sc_trace(mVcdFile, sha_info_digest_ce1, "sha_info_digest_ce1");
    sc_trace(mVcdFile, sha_info_digest_we1, "sha_info_digest_we1");
    sc_trace(mVcdFile, sha_info_digest_d1, "sha_info_digest_d1");
    sc_trace(mVcdFile, sha_info_digest_q1, "sha_info_digest_q1");
    sc_trace(mVcdFile, j_fu_138_p2, "j_fu_138_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, add_ln66_fu_169_p2, "add_ln66_fu_169_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, grp_sha_transform_fu_124_ap_start, "grp_sha_transform_fu_124_ap_start");
    sc_trace(mVcdFile, grp_sha_transform_fu_124_ap_done, "grp_sha_transform_fu_124_ap_done");
    sc_trace(mVcdFile, grp_sha_transform_fu_124_ap_idle, "grp_sha_transform_fu_124_ap_idle");
    sc_trace(mVcdFile, grp_sha_transform_fu_124_ap_ready, "grp_sha_transform_fu_124_ap_ready");
    sc_trace(mVcdFile, grp_sha_transform_fu_124_sha_info_data_address0, "grp_sha_transform_fu_124_sha_info_data_address0");
    sc_trace(mVcdFile, grp_sha_transform_fu_124_sha_info_data_ce0, "grp_sha_transform_fu_124_sha_info_data_ce0");
    sc_trace(mVcdFile, grp_sha_transform_fu_124_sha_info_digest_address0, "grp_sha_transform_fu_124_sha_info_digest_address0");
    sc_trace(mVcdFile, grp_sha_transform_fu_124_sha_info_digest_ce0, "grp_sha_transform_fu_124_sha_info_digest_ce0");
    sc_trace(mVcdFile, grp_sha_transform_fu_124_sha_info_digest_we0, "grp_sha_transform_fu_124_sha_info_digest_we0");
    sc_trace(mVcdFile, grp_sha_transform_fu_124_sha_info_digest_d0, "grp_sha_transform_fu_124_sha_info_digest_d0");
    sc_trace(mVcdFile, grp_sha_transform_fu_124_sha_info_digest_address1, "grp_sha_transform_fu_124_sha_info_digest_address1");
    sc_trace(mVcdFile, grp_sha_transform_fu_124_sha_info_digest_ce1, "grp_sha_transform_fu_124_sha_info_digest_ce1");
    sc_trace(mVcdFile, grp_sha_transform_fu_124_sha_info_digest_we1, "grp_sha_transform_fu_124_sha_info_digest_we1");
    sc_trace(mVcdFile, grp_sha_transform_fu_124_sha_info_digest_d1, "grp_sha_transform_fu_124_sha_info_digest_d1");
    sc_trace(mVcdFile, j_0_reg_102, "j_0_reg_102");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, icmp_ln210_fu_132_p2, "icmp_ln210_fu_132_p2");
    sc_trace(mVcdFile, p_1_rec_i_reg_113, "p_1_rec_i_reg_113");
    sc_trace(mVcdFile, icmp_ln64_fu_163_p2, "icmp_ln64_fu_163_p2");
    sc_trace(mVcdFile, grp_sha_transform_fu_124_ap_start_reg, "grp_sha_transform_fu_124_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, sum_i_cast_fu_154_p1, "sum_i_cast_fu_154_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, empty_10_fu_144_p1, "empty_10_fu_144_p1");
    sc_trace(mVcdFile, sum_i_fu_148_p2, "sum_i_fu_148_p2");
    sc_trace(mVcdFile, trunc_ln64_fu_159_p1, "trunc_ln64_fu_159_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("sha_stream.hdltvin.dat");
    mHdltvoutHandle.open("sha_stream.hdltvout.dat");
}

sha_stream::~sha_stream() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete sha_info_data_U;
    delete sha_info_digest_U;
    delete grp_sha_transform_fu_124;
}

void sha_stream::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv32_0;
}

void sha_stream::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_lv4_F;
}

void sha_stream::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_sha_transform_fu_124_ap_start_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
            grp_sha_transform_fu_124_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_sha_transform_fu_124_ap_ready.read())) {
            grp_sha_transform_fu_124_ap_start_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(icmp_ln210_fu_132_p2.read(), ap_const_lv1_0))) {
        j_0_reg_102 = j_fu_138_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        j_0_reg_102 = ap_const_lv2_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(icmp_ln210_fu_132_p2.read(), ap_const_lv1_1))) {
        p_1_rec_i_reg_113 = ap_const_lv64_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln64_fu_163_p2.read()))) {
        p_1_rec_i_reg_113 = add_ln66_fu_169_p2.read();
    }
}

void sha_stream::thread_add_ln66_fu_169_p2() {
    add_ln66_fu_169_p2 = (!ap_const_lv64_1.is_01() || !p_1_rec_i_reg_113.read().is_01())? sc_lv<64>(): (sc_biguint<64>(ap_const_lv64_1) + sc_biguint<64>(p_1_rec_i_reg_113.read()));
}

void sha_stream::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void sha_stream::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void sha_stream::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void sha_stream::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void sha_stream::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void sha_stream::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void sha_stream::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void sha_stream::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
         esl_seteq<1,1,1>(grp_sha_transform_fu_124_ap_done.read(), ap_const_logic_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void sha_stream::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void sha_stream::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
         esl_seteq<1,1,1>(grp_sha_transform_fu_124_ap_done.read(), ap_const_logic_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void sha_stream::thread_empty_10_fu_144_p1() {
    empty_10_fu_144_p1 = p_1_rec_i_reg_113.read().range(6-1, 0);
}

void sha_stream::thread_grp_sha_transform_fu_124_ap_start() {
    grp_sha_transform_fu_124_ap_start = grp_sha_transform_fu_124_ap_start_reg.read();
}

void sha_stream::thread_icmp_ln210_fu_132_p2() {
    icmp_ln210_fu_132_p2 = (!j_0_reg_102.read().is_01() || !ap_const_lv2_2.is_01())? sc_lv<1>(): sc_lv<1>(j_0_reg_102.read() == ap_const_lv2_2);
}

void sha_stream::thread_icmp_ln64_fu_163_p2() {
    icmp_ln64_fu_163_p2 = (!trunc_ln64_fu_159_p1.read().is_01() || !ap_const_lv32_D.is_01())? sc_lv<1>(): sc_lv<1>(trunc_ln64_fu_159_p1.read() == ap_const_lv32_D);
}

void sha_stream::thread_j_fu_138_p2() {
    j_fu_138_p2 = (!j_0_reg_102.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(j_0_reg_102.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void sha_stream::thread_sha_info_data_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(icmp_ln64_fu_163_p2.read(), ap_const_lv1_1))) {
        sha_info_data_address0 = ap_const_lv4_E;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln64_fu_163_p2.read()))) {
        sha_info_data_address0 =  (sc_lv<4>) (sum_i_cast_fu_154_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        sha_info_data_address0 = ap_const_lv4_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        sha_info_data_address0 = grp_sha_transform_fu_124_sha_info_data_address0.read();
    } else {
        sha_info_data_address0 = "XXXX";
    }
}

void sha_stream::thread_sha_info_data_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln64_fu_163_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(icmp_ln64_fu_163_p2.read(), ap_const_lv1_1)))) {
        sha_info_data_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        sha_info_data_ce0 = grp_sha_transform_fu_124_sha_info_data_ce0.read();
    } else {
        sha_info_data_ce0 = ap_const_logic_0;
    }
}

void sha_stream::thread_sha_info_data_ce1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        sha_info_data_ce1 = ap_const_logic_1;
    } else {
        sha_info_data_ce1 = ap_const_logic_0;
    }
}

void sha_stream::thread_sha_info_data_d0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln64_fu_163_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(icmp_ln64_fu_163_p2.read(), ap_const_lv1_1)))) {
        sha_info_data_d0 = ap_const_lv32_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        sha_info_data_d0 = ap_const_lv32_80;
    } else {
        sha_info_data_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void sha_stream::thread_sha_info_data_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln64_fu_163_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(icmp_ln210_fu_132_p2.read(), ap_const_lv1_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(icmp_ln64_fu_163_p2.read(), ap_const_lv1_1)))) {
        sha_info_data_we0 = ap_const_logic_1;
    } else {
        sha_info_data_we0 = ap_const_logic_0;
    }
}

void sha_stream::thread_sha_info_data_we1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(icmp_ln64_fu_163_p2.read(), ap_const_lv1_1))) {
        sha_info_data_we1 = ap_const_logic_1;
    } else {
        sha_info_data_we1 = ap_const_logic_0;
    }
}

void sha_stream::thread_sha_info_digest_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        sha_info_digest_address0 = ap_const_lv3_4;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        sha_info_digest_address0 = ap_const_lv3_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        sha_info_digest_address0 = ap_const_lv3_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        sha_info_digest_address0 = grp_sha_transform_fu_124_sha_info_digest_address0.read();
    } else {
        sha_info_digest_address0 =  (sc_lv<3>) ("XXX");
    }
}

void sha_stream::thread_sha_info_digest_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        sha_info_digest_address1 = ap_const_lv3_3;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        sha_info_digest_address1 = ap_const_lv3_2;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        sha_info_digest_address1 = grp_sha_transform_fu_124_sha_info_digest_address1.read();
    } else {
        sha_info_digest_address1 =  (sc_lv<3>) ("XXX");
    }
}

void sha_stream::thread_sha_info_digest_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        sha_info_digest_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        sha_info_digest_ce0 = grp_sha_transform_fu_124_sha_info_digest_ce0.read();
    } else {
        sha_info_digest_ce0 = ap_const_logic_0;
    }
}

void sha_stream::thread_sha_info_digest_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        sha_info_digest_ce1 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        sha_info_digest_ce1 = grp_sha_transform_fu_124_sha_info_digest_ce1.read();
    } else {
        sha_info_digest_ce1 = ap_const_logic_0;
    }
}

void sha_stream::thread_sha_info_digest_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        sha_info_digest_d0 = ap_const_lv32_C3D2E1F0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        sha_info_digest_d0 = ap_const_lv32_EFCDAB89;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        sha_info_digest_d0 = ap_const_lv32_67452301;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        sha_info_digest_d0 = grp_sha_transform_fu_124_sha_info_digest_d0.read();
    } else {
        sha_info_digest_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void sha_stream::thread_sha_info_digest_d1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        sha_info_digest_d1 = ap_const_lv32_10325476;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        sha_info_digest_d1 = ap_const_lv32_98BADCFE;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        sha_info_digest_d1 = grp_sha_transform_fu_124_sha_info_digest_d1.read();
    } else {
        sha_info_digest_d1 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void sha_stream::thread_sha_info_digest_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        sha_info_digest_we0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        sha_info_digest_we0 = grp_sha_transform_fu_124_sha_info_digest_we0.read();
    } else {
        sha_info_digest_we0 = ap_const_logic_0;
    }
}

void sha_stream::thread_sha_info_digest_we1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        sha_info_digest_we1 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        sha_info_digest_we1 = grp_sha_transform_fu_124_sha_info_digest_we1.read();
    } else {
        sha_info_digest_we1 = ap_const_logic_0;
    }
}

void sha_stream::thread_sum_i_cast_fu_154_p1() {
    sum_i_cast_fu_154_p1 = esl_zext<64,6>(sum_i_fu_148_p2.read());
}

void sha_stream::thread_sum_i_fu_148_p2() {
    sum_i_fu_148_p2 = (!ap_const_lv6_1.is_01() || !empty_10_fu_144_p1.read().is_01())? sc_lv<6>(): (sc_biguint<6>(ap_const_lv6_1) + sc_biguint<6>(empty_10_fu_144_p1.read()));
}

void sha_stream::thread_trunc_ln64_fu_159_p1() {
    trunc_ln64_fu_159_p1 = p_1_rec_i_reg_113.read().range(32-1, 0);
}

void sha_stream::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(icmp_ln210_fu_132_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln64_fu_163_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && esl_seteq<1,1,1>(grp_sha_transform_fu_124_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state7;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<7>) ("XXXXXXX");
            break;
    }
}

void sha_stream::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

