// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _sha_stream_HH_
#define _sha_stream_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "sha_transform.h"
#include "sha_stream_sha_inbkb.h"
#include "sha_stream_sha_incud.h"

namespace ap_rtl {

struct sha_stream : public sc_module {
    // Port declarations 6
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_signal< sc_lv<32> > ap_var_for_const1;
    sc_signal< sc_lv<4> > ap_var_for_const0;


    // Module declarations
    sha_stream(sc_module_name name);
    SC_HAS_PROCESS(sha_stream);

    ~sha_stream();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sha_stream_sha_inbkb* sha_info_data_U;
    sha_stream_sha_incud* sha_info_digest_U;
    sha_transform* grp_sha_transform_fu_124;
    sc_signal< sc_lv<7> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<4> > sha_info_data_address0;
    sc_signal< sc_logic > sha_info_data_ce0;
    sc_signal< sc_logic > sha_info_data_we0;
    sc_signal< sc_lv<32> > sha_info_data_d0;
    sc_signal< sc_lv<32> > sha_info_data_q0;
    sc_signal< sc_logic > sha_info_data_ce1;
    sc_signal< sc_logic > sha_info_data_we1;
    sc_signal< sc_lv<3> > sha_info_digest_address0;
    sc_signal< sc_logic > sha_info_digest_ce0;
    sc_signal< sc_logic > sha_info_digest_we0;
    sc_signal< sc_lv<32> > sha_info_digest_d0;
    sc_signal< sc_lv<32> > sha_info_digest_q0;
    sc_signal< sc_lv<3> > sha_info_digest_address1;
    sc_signal< sc_logic > sha_info_digest_ce1;
    sc_signal< sc_logic > sha_info_digest_we1;
    sc_signal< sc_lv<32> > sha_info_digest_d1;
    sc_signal< sc_lv<32> > sha_info_digest_q1;
    sc_signal< sc_lv<2> > j_fu_138_p2;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<64> > add_ln66_fu_169_p2;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_logic > grp_sha_transform_fu_124_ap_start;
    sc_signal< sc_logic > grp_sha_transform_fu_124_ap_done;
    sc_signal< sc_logic > grp_sha_transform_fu_124_ap_idle;
    sc_signal< sc_logic > grp_sha_transform_fu_124_ap_ready;
    sc_signal< sc_lv<4> > grp_sha_transform_fu_124_sha_info_data_address0;
    sc_signal< sc_logic > grp_sha_transform_fu_124_sha_info_data_ce0;
    sc_signal< sc_lv<3> > grp_sha_transform_fu_124_sha_info_digest_address0;
    sc_signal< sc_logic > grp_sha_transform_fu_124_sha_info_digest_ce0;
    sc_signal< sc_logic > grp_sha_transform_fu_124_sha_info_digest_we0;
    sc_signal< sc_lv<32> > grp_sha_transform_fu_124_sha_info_digest_d0;
    sc_signal< sc_lv<3> > grp_sha_transform_fu_124_sha_info_digest_address1;
    sc_signal< sc_logic > grp_sha_transform_fu_124_sha_info_digest_ce1;
    sc_signal< sc_logic > grp_sha_transform_fu_124_sha_info_digest_we1;
    sc_signal< sc_lv<32> > grp_sha_transform_fu_124_sha_info_digest_d1;
    sc_signal< sc_lv<2> > j_0_reg_102;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<1> > icmp_ln210_fu_132_p2;
    sc_signal< sc_lv<64> > p_1_rec_i_reg_113;
    sc_signal< sc_lv<1> > icmp_ln64_fu_163_p2;
    sc_signal< sc_logic > grp_sha_transform_fu_124_ap_start_reg;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<64> > sum_i_cast_fu_154_p1;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<6> > empty_10_fu_144_p1;
    sc_signal< sc_lv<6> > sum_i_fu_148_p2;
    sc_signal< sc_lv<32> > trunc_ln64_fu_159_p1;
    sc_signal< sc_lv<7> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<7> ap_ST_fsm_state1;
    static const sc_lv<7> ap_ST_fsm_state2;
    static const sc_lv<7> ap_ST_fsm_state3;
    static const sc_lv<7> ap_ST_fsm_state4;
    static const sc_lv<7> ap_ST_fsm_state5;
    static const sc_lv<7> ap_ST_fsm_state6;
    static const sc_lv<7> ap_ST_fsm_state7;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_67452301;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_EFCDAB89;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<32> ap_const_lv32_98BADCFE;
    static const sc_lv<3> ap_const_lv3_2;
    static const sc_lv<32> ap_const_lv32_10325476;
    static const sc_lv<3> ap_const_lv3_3;
    static const sc_lv<32> ap_const_lv32_C3D2E1F0;
    static const sc_lv<3> ap_const_lv3_4;
    static const sc_lv<32> ap_const_lv32_80;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<4> ap_const_lv4_E;
    static const sc_lv<4> ap_const_lv4_F;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<6> ap_const_lv6_1;
    static const sc_lv<32> ap_const_lv32_D;
    static const sc_lv<64> ap_const_lv64_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const1();
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_add_ln66_fu_169_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_empty_10_fu_144_p1();
    void thread_grp_sha_transform_fu_124_ap_start();
    void thread_icmp_ln210_fu_132_p2();
    void thread_icmp_ln64_fu_163_p2();
    void thread_j_fu_138_p2();
    void thread_sha_info_data_address0();
    void thread_sha_info_data_ce0();
    void thread_sha_info_data_ce1();
    void thread_sha_info_data_d0();
    void thread_sha_info_data_we0();
    void thread_sha_info_data_we1();
    void thread_sha_info_digest_address0();
    void thread_sha_info_digest_address1();
    void thread_sha_info_digest_ce0();
    void thread_sha_info_digest_ce1();
    void thread_sha_info_digest_d0();
    void thread_sha_info_digest_d1();
    void thread_sha_info_digest_we0();
    void thread_sha_info_digest_we1();
    void thread_sum_i_cast_fu_154_p1();
    void thread_sum_i_fu_148_p2();
    void thread_trunc_ln64_fu_159_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
